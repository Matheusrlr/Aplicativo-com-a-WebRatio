<?xml version="1.0" encoding="UTF-8"?>

<Component type="content" formBased="false" idPrefix="dau" namePrefix="Details " label="Details" dataFlowSource="true" navigationFlowSource="true" dataFlowTarget="true" navigationFlowTarget="true"  errorFlowTarget="true"  successFlowTarget="true" canPlaceLayoutComponent="true" canPlaceLayoutAttributes="true" canPlaceLayoutEvents="true"> 
  <DomainClassProperty attributeName="dataBinding" includeDerived="true" figureDisplayOrder="1"> 
	<Description xml:space="preserve">The class from which the content of the component is drawn.</Description>
  </DomainClassProperty>  
  <AttributesProperty classIdExpr="@dataBinding" attributeName="displayAttributes" includeDerived="true" enabledImportExtraAttributes="true"> 
    <Description xml:space="preserve">The list of class attributes displayed by the component.</Description>
	<IsEnabled>return (element["dataBinding"] != "")</IsEnabled> 
  </AttributesProperty>  
  <ConditionalExpression classIdExpr="../../@dataBinding" elementName="ConditionalExpression" defaultPolicy="true" figureDisplayOrder="2" automatic="true">
	<Description xml:space="preserve">The set of selection criteria that retrieves the instances of the class of the component.</Description>
  </ConditionalExpression>
  <Description xml:space="preserve">Detail components display a set of attributes, which provides a meaningful view of a
single instance of a given class of the domain model. 
The definition of a details requires:
&lt;ul&gt;
  &lt;li&gt;The specification of the class to which the component refers and 
of a conditional expression used to identify the instance displayed in the component.&lt;/li&gt;
  &lt;li&gt;The selection of the attributes to be included in the component.&lt;/li&gt;
&lt;/ul&gt;</Description>
  <InputDescription xml:space="preserve" name="Condition-Name">The parameter associated to one of the Conditional Expressions
of the component.</InputDescription>  
  <OutputDescription xml:space="preserve" name="Attribute-Name">One of attributes of the component's class.</OutputDescription>  
  <OutputDescription xml:space="preserve" name="ForeignKey-Name">The value for one of the foreign key attributes of the object 
connected to the extracted object.</OutputDescription>  
  <OutputDescription xml:space="preserve" name="Data Size">The integer value indicating if a class state object has been retrieved by the query. Possible values are: 1, 0</OutputDescription>
  <IsContextFreeComponent xml:space="preserve">return getIncomingFlows(component).empty</IsContextFreeComponent>  
  <IsMultiConditionComponent xml:space="preserve">if (getIncomingFlows(component).size() &lt;= 1) {
	return false
}

def sel = component.element("ConditionalExpression")
if (sel == null) {
	return false
}
def count = sel.elements("AssociationRoleCondition").size() + sel.elements("KeyCondition").size()
for (cond in sel.elements("AttributesCondition")) {
	def pred = cond["predicate"]
	if ((cond["value"] == "") &amp;&amp; !isUnaryPredicate(pred)) {
		count++
	}
}
return count &gt; 1</IsMultiConditionComponent>
  <LayoutAttributes xml:space="preserve">if (component["displayAll"] == "true") {
	def dclass = getById(component["dataBinding"])    
	def attrIdSet = new HashSet(getAttributes(dclass).findAll{ it["key"] != "true" }.collect{ it["id"] })
	def ids = []
	for (cls in getSuperDomainClassHierarchy(dclass).reverse()) {
		for (attributeId in cls["attributeOrder"].tokenize(" ")) {
			def attribute = getById(attributeId)
			if (attribute &amp;&amp; attribute["key"] != "true") {
				ids.add(attributeId)
			}
		}
	}
	attrIdSet.removeAll(ids)
	ids.addAll(attrIdSet)
    return ids
} else {
	return component["displayAttributes"].tokenize(" ")
}
  </LayoutAttributes>
  <LayoutAttributeItem xml:space="preserve">"view.data"</LayoutAttributeItem> 
<BeanDescription xml:space="preserve">
&lt;p&gt;The component state object for the Details component consists of the following properties:
  &lt;ul&gt;
    &lt;li&gt;&lt;code&gt;number dataSize&lt;/code&gt;: the number of class state objects (zero or one)&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;Array&amp;lt;Object&amp;gt; data&lt;/code&gt;: the array of class state objects. The class state object depends on the class the component is based.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;
Consider as example the "Company" class which is composed of "OID", "VAT code", "name", "foundation date" , "logo", "address", "phone number" and "website" attributes.&lt;br/&gt;
The &lt;code&gt;Object data&lt;/code&gt; of a Details component based on the "Company" class has the following properties:
  &lt;ul&gt;
    &lt;li&gt;&lt;code&gt;number OID&lt;/code&gt;: the value of the "oid" attribute&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;string VATCode&lt;/code&gt;: the value of the "VAT code" attribute&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;string name&lt;/code&gt;: the value of the "name" attribute&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;wrm.data.Date foundationDate&lt;/code&gt;: the value of the "foundation date" attribute&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;wrm.data.Blob logo&lt;/code&gt;: the value of the "logo" attribute&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;string address&lt;/code&gt;: the value of the "address" attribute&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;string phoneNumber&lt;/code&gt;: the value of the "phone number" attribute&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;string website&lt;/code&gt;: the value of the "website" attribute&lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;
</BeanDescription>  
</Component>