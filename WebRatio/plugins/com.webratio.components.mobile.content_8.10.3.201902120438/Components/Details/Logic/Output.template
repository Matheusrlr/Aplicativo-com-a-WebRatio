#?delimiters [%, %], [%=, %]
[%
setXMLOutput()

def dClassId = component["dataBinding"]
def dclass = getById(dClassId);
def attributes = getAttributes(dclass)
def roles = getOutgoingRoles(dclass).findAll{!isMany(it)}
%]
<OutputParameters>
	[% for (a in attributes) {
		if (isOutputBindableAttribute(a)) { %]
			<OutputParameter
				name="data.[%= a["id"] %]"
				refId="[%= a["id"] %]"
				type="[%= getTypeExpression(dclass, a, true, false) %]"
				label="[%= getLabel(a) %]"
			/>
		[% }
	}
	for (role in roles) {
		def keyAttributes = getKeyAttributes(getTargetDomainClass(role))
		for (keyAttr in keyAttributes) { %]
			<OutputParameter
				name="data.[%= role["id"] + "_" + keyAttr["id"] %]"
				refId="[%= role["id"] %]"
				label="[%= getLabel(role) + "." + getLabel(keyAttr) %]"
				mandatory="false"
			/>
		[% }
	} %]
	[% component["displayAttributes"].tokenize(" ").findAll{it.contains(".")}.each{ %]
		<OutputParameter name="data.[%=getAttributeExpressionId(it)%]" refId="importedAttribute" label="[%=getAttributeExpressionImportLabel(it)%]" possiblyLarge="true"/>
	[% } %]
	<OutputParameter name="dataSize" label="Data Size"/>
</OutputParameters>