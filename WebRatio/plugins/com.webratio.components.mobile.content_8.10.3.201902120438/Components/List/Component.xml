<?xml version="1.0" encoding="UTF-8"?>

<Component type="content" formBased="true" idPrefix="pwu" namePrefix="List " label="List" dataFlowSource="true" navigationFlowSource="true" dataFlowTarget="true" navigationFlowTarget="true"  errorFlowTarget="true"  successFlowTarget="true" canPlaceLayoutComponent="true"> 
  <DomainClassProperty attributeName="dataBinding" includeDerived="true" figureDisplayOrder="1"> 
    <Description xml:space="preserve">The class from which the content of the component is drawn.</Description> 
  </DomainClassProperty>   
  <ConditionalExpression classIdExpr="../../@dataBinding" elementName="ConditionalExpression" defaultPolicy="true" figureDisplayOrder="2">  
	<Description xml:space="preserve">The set of selection criteria that retrieves the instances of the class of the component.</Description> 
  </ConditionalExpression>
  <ConditionalExpression label="Preload Conditional Expression" classIdExpr="../../@dataBinding" elementName="PreConditionalExpression" defaultPolicy="false" figureDisplayOrder="3">  
	<Description xml:space="preserve">A Preload Conditional Expression is like a Conditional Expression, but is used to determine which objects of the
list must be displayed as pre-checked when rendering the component.</Description> 
  </ConditionalExpression>
  <AttributesProperty classIdExpr="@dataBinding" attributeName="displayAttributes" includeDerived="true" enabledImportExtraAttributes="true"> 
    <Description xml:space="preserve">The list of class attributes displayed by the component.</Description>
	<IsEnabled>return (element["dataBinding"] != "")</IsEnabled> 
  </AttributesProperty>  
  <SortAttributesProperty label="Sort Attributes" elementName="SortAttribute" attributeName="attribute" classIdExpr="@dataBinding" attributeIdsExpr="@displayAttributes"> 
    <Description xml:space="preserve">The sorting criteria used to display the objects in the simple list.</Description>
	<IsEnabled>return (element["dataBinding"] != "")</IsEnabled> 
  </SortAttributesProperty>
  <BooleanProperty label="Checkable" attributeName="checkable" defaultValue="false"> 
    <IsEnabled>return (element["distinct"] != "true")</IsEnabled> 
  </BooleanProperty>
  <IntegerProperty attributeName="maxResults">
	<Description xml:space="preserve">The maximum number of rows to retrieve. If unspecified, all rows are retrieved.</Description>
  </IntegerProperty>
  <BooleanProperty label="Distinct" attributeName="distinct"/>
  <Description xml:space="preserve">The List Component is a View Component used to display a list of object instances.</Description>
  <InputDescription xml:space="preserve" name="Condition-Name">The parameter associated to one of the Conditional Expressions
of the component.</InputDescription>
  <OutputDescription xml:space="preserve" name="Attribute-Name">The value of one of the class attributes for the object selected
from the component.</OutputDescription>  
  <OutputDescription xml:space="preserve" name="ForeignKey-Name">The value for one of the foreign key attributes of the object 
connected to the object selected.</OutputDescription>
  <OutputDescription xml:space="preserve" name="Data Size">A numerical value representing the shown data size of the list.</OutputDescription>
  <IsContextFreeComponent xml:space="preserve">
def incomingFlows = getIncomingFlows(component).findAll{it["_exp"] != "t"}
if (incomingFlows.empty) {
	return true
}
for (flow in incomingFlows) {
	def bindings = flow.selectNodes("ParameterBinding")
	def automaticBindings = bindings.empty ? getAutomaticParameterBindings(flow) : []
	if (!bindings.empty) {
		if (bindings.any{!it["target"].startsWith("current")}) {
			return false
		}
	} else {
		if (automaticBindings.any{!it.target.startsWith("current")}) {
			return false
		}
	}
}
return true</IsContextFreeComponent>  
  <IsMultiConditionComponent xml:space="preserve">
def incomingFlows = getIncomingFlows(component).findAll{it["_exp"] != "t"}
if (incomingFlows.size() &lt;= 1) {
	return false
}
def sel = component.element("ConditionalExpression")
if (sel == null) {
	return false
}
def count = sel.elements("AssociationRoleCondition").size() + sel.elements("KeyCondition").size()
for (cond in sel.elements("AttributesCondition")) {
	def pred = cond["predicate"]
	if ((cond["value"] == "") &amp;&amp; !isUnaryPredicate(pred)) {
		count++
    }
}
return count &gt; 1</IsMultiConditionComponent>  
  <LayoutAttributes xml:space="preserve">return component["displayAttributes"].tokenize(" ")</LayoutAttributes>
  <BeanDescription xml:space="preserve">
 &lt;p&gt;The component state object for the List consists of the following properties:
  &lt;ul&gt;
    &lt;li&gt;&lt;code&gt;number dataSize&lt;/code&gt;: the number of class state objects (zero or many)&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;Array&amp;lt;Object&amp;gt; data&lt;/code&gt;: the list of class state objects&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;number checkedRows&lt;/code&gt;: the array with the values of the oid attribute of the pre-checked 
        objects only (available if the component is Checkable)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;
Consider as example the "Company" class which is composed of "OID", "VAT code", "name", "foundation date" , "logo", "address", "phone number" and "website" attributes.&lt;br/&gt;
The &lt;code&gt;Object data&lt;/code&gt; of a List component based on the "Company" class has the following properties:
  &lt;ul&gt;
    &lt;li&gt;&lt;code&gt;number OID&lt;/code&gt;: the value of the "oid" attribute&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;string VATCode&lt;/code&gt;: the value of the "VAT code" attribute&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;string name&lt;/code&gt;: the value of the "name" attribute&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;wrm.data.Date foundationDate&lt;/code&gt;: the value of the "foundation date" attribute&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;wrm.data.Blob logo&lt;/code&gt;: the value of the "logo" attribute&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;string address&lt;/code&gt;: the value of the "address" attribute&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;string phoneNumber&lt;/code&gt;: the value of the "phone number" attribute&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;string website&lt;/code&gt;: the value of the "website" attribute&lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;
 </BeanDescription>
</Component>