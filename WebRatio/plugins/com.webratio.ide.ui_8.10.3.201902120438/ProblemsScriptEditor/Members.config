<?xml version="1.0" encoding="UTF-8"?>
<Root>
  
  <!-- VARIABLES -->
  
  <Variable
      name="component"
      type="Element"
      scriptKinds="comp">
    <Description>
      The current component DOM element
    </Description>
  </Variable>
  
  <Variable
      name="event"
      type="Element"
      scriptKinds="event">
    <Description>
      The current event DOM element
    </Description>
  </Variable>
  
  <Variable
      name="element"
      type="Element"
      scriptKinds="vrule">
    <Description>
      The current validation rule DOM element
    </Description>
  </Variable>
  
  <!-- FUNCTIONS -->
  
  <Function 
      declaration="addWarning(String message)"
      returnType="">
    <Description>
      Adds an warning-level problem to the main element checked by the script.
    </Description>
    <Param name="message" descr="human-readable message describing the problem."/>
  </Function>

  <Function 
      declaration="addWarning(Element targetElement, String message)"
      returnType="">
    <Description>
      Adds an warning-level problem to a specific element related the main element checked by the script.
    </Description>
    <Param name="targetElement" descr="element on which to place the problem marker. Must be a descendant of the checked element."/>
    <Param name="message" descr="human-readable message describing the problem."/>
  </Function>

  <Function 
      declaration="addError(String message)"
      returnType="">
    <Description>
      Adds an error-level problem to the main element checked by the script.
    </Description>
    <Param name="message" descr="human-readable message describing the problem."/>
  </Function>

  <Function 
      declaration="addError(Element targetElement, String message)"
      returnType="">
    <Description>
      Adds an error-level problem to a specific element related the main element checked by the script.
    </Description>
    <Param name="targetElement" descr="element on which to place the problem marker. Must be a descendant of the checked element."/>
    <Param name="message" descr="human-readable message describing the problem."/>
  </Function>
  
  <!-- #Generated (Mixins .+) -->

  <Function 
      declaration="isSessionEnabledJob(Element job)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the job is session-enabled, &lt;code&gt;false&lt;/code&gt; otherwise.">
    <Description>
      Determines whether a job is always executed in the context of a session.
    </Description>
    <Usage>
      &lt;pre&gt;
       def job component.selectSingleNode(&quot;ancestor::Job&quot;) 
       isSessionEnabledJob(job)
       &lt;/pre&gt;
    </Usage>
    <Param name="job" descr="a &lt;code&gt;Job&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="findUnmodifiableRoleNameColumn(Element role)"
      returnType="String"
      returnDescr="the name of the wrong column.">
    <Description>
      Checks whether a role is mapped on a database column that is not modifiable. A common example is that of a column that is part
       of a multiple-column key.
    </Description>
    <Usage>
      findUnmodifiableRoleNameColumn(role)
    </Usage>
    <Param name="role" descr="an &lt;code&gt;AssociationRole1&lt;/code&gt; or &lt;code&gt;AssociationRole2&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="toValidClassName(String string)"
      returnType="String"
      returnDescr="a string containing a valid class name.">
    <Description>
      Obtains a valid class name from any string.
       &lt;p&gt;
       The converted name uses &lt;i&gt;upper camel case&lt;/i&gt;, contains no spaces and does not start with a digit. This is compatible with the
       syntax and conventions of Java and many other programming languages.&lt;/p&gt;
    </Description>
    <Usage>
      &lt;pre&gt;
       toValidClassName(&quot;Item&quot;) // Item
       toValidClassName(&quot;admin user&quot;) // AdminUser
       &lt;/pre&gt;
    </Usage>
    <Param name="string" descr="a string to be converted."/>
  </Function>

  <Function 
      declaration="toValidFieldName(String string)"
      returnType="String"
      returnDescr="a string containing a valid field name.">
    <Description>
      Obtains a valid field name from any string.
       &lt;p&gt;
       The converted name uses &lt;i&gt;lower camel case&lt;/i&gt;, contains no spaces and does not start with a digit. This is compatible with the
       syntax and conventions of Java and many other programming languages.&lt;/p&gt;
    </Description>
    <Usage>
      &lt;pre&gt;
       toValidClassName(&quot;4&quot;) // _4
       toValidClassName(&quot;Foo&quot;) // foo
       &lt;/pre&gt;
    </Usage>
    <Param name="string" descr="a string to be converted."/>
  </Function>

  <Function 
      declaration="getJavaType(String type)"
      returnType="String"
      returnDescr="a fully qualified Java type name.">
    <Description>
      Gets the fully qualified name of the Java type that is suitable for storing the values of a model attribute of a given type.
    </Description>
    <Usage>
      &lt;pre&gt;
       getJavaType(&quot;string&quot;) // java.lang.String
       getJavaType(&quot;time&quot;) // java.sql.Time
       &lt;/pre&gt;
    </Usage>
    <Param name="type" descr="a model type."/>
  </Function>

  <Function 
      declaration="isLocalizedType(String type)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the type is localizable.">
    <Description>
      Determines whether a model type supports localization.
    </Description>
    <Usage>
      &lt;pre&gt;
       isLocalizedType(&quot;date&quot;) // true
       isLocalizedType(&quot;string&quot;)
       &lt;/pre&gt;
    </Usage>
    <Param name="type" descr="a model type."/>
  </Function>

  <Function 
      declaration="isDateTimeType(String type)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the type is date/time/timestamp.">
    <Description>
      Determines whether a model type represents a type that accepts temporal values (e.g. dates or times).
    </Description>
    <Usage>
      &lt;pre&gt;
       isDateTimeType(&quot;timestamp&quot;) // true
       isDateTimeType(&quot;float&quot;) // false
       &lt;/pre&gt;
    </Usage>
    <Param name="type" descr="a model type."/>
  </Function>

  <Function 
      declaration="isNumericType(String type)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the type is numeric.">
    <Description>
      Determines whether a model type represents a type that accepts numeric values.
    </Description>
    <Usage>
      &lt;pre&gt;
       isNumericType(&quot;decimal&quot;) // true
       isNumericType(&quot;string&quot;) // false
       &lt;/pre&gt;
    </Usage>
    <Param name="type" descr="a model type."/>
  </Function>

  <Function 
      declaration="isBinaryType(String type)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the type is binary.">
    <Description>
      Determines whether a model type represents a type that accepts binary values (e.g. image or audio).
    </Description>
    <Usage>
      &lt;pre&gt;
       isBinaryType(&quot;blob&quot;) // true
       isBinaryType(&quot;integer&quot;) // false
       &lt;/pre&gt;
    </Usage>
    <Param name="type" descr="a model type."/>
  </Function>

  <Function 
      declaration="isMany(Element role)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the role has &lt;i&gt;many&lt;/i&gt; cardinality.">
    <Description>
      Determines whether an association role has a &lt;i&gt;many&lt;/i&gt; (or &lt;i&gt;N&lt;/i&gt;) target cardinality.
    </Description>
    <Usage>
      isMany(getById(&quot;role1&quot;))
    </Usage>
    <Param name="role" descr="an &lt;code&gt;AssociationRole1&lt;/code&gt; or &lt;code&gt;AssociationRole2&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="isUnaryPredicate(String predicate)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the predicate is unary."
      scriptKinds="comp|event|vrule">
    <Description>
      Determines whether an attribute condition predicate is &lt;i&gt;unary&lt;/i&gt; (i.e. taking only one operand).
    </Description>
    <Usage>
      &lt;pre&gt;
       isUnaryPredicate(&quot;eq&quot;) // false
       isUnaryPredicate(&quot;null&quot;) // true
       &lt;/pre&gt;
    </Usage>
    <Param name="predicate" descr="a predicate that can be specified on &lt;code&gt;AttributesCondition&lt;/code&gt; elements."/>
  </Function>

  <Function 
      declaration="getFilePath(String directory, String name, String extension)"
      returnType="String"
      returnDescr="full file path, normalized to use only the OS-neutral &lt;code&gt;/&lt;/code&gt; separator.">
    <Description>
      Constructs a file path from a directory path, a file name and file extension.
       &lt;p&gt;
       Paths can be specified with a mix of the OS-specific file separator and the OS-neutral &lt;code&gt;/&lt;/code&gt; separator. Additional or
       missing file separator are automatically handled. A dot for separating the extension is also added if missing.&lt;/p&gt;
    </Description>
    <Usage>
      getFilePath(imageFolder, &quot;NextButton&quot;, &quot;png&quot;)
    </Usage>
    <Param name="directory" descr="directory path, accepting OS-specific separators or &lt;code&gt;/&lt;/code&gt;."/>
    <Param name="name" descr="file name."/>
    <Param name="extension" descr="file extension, with or without a leading dot (&lt;code&gt;.&lt;/code&gt;)."/>
  </Function>

  <Function 
      declaration="getAllAreas()"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;code&gt;Area&lt;/code&gt; elements.">
    <Description>
      Gets all areas defined in the current project.
    </Description>
  </Function>

  <Function 
      declaration="getAllMasterContainers()"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;code&gt;MasterContainer&lt;/code&gt; elements.">
    <Description>
      Gets all master containers in the current project.
    </Description>
  </Function>

  <Function 
      declaration="getAllProtectedElements()"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;i&gt;protected&lt;/i&gt; elements.">
    <Description>
      Gets all &lt;i&gt;protected&lt;/i&gt; elements in the current project.
       &lt;p&gt;
       Protected elements are those that can be referenced by instances of the &lt;code&gt;ModelElement&lt;/code&gt; class to
       define security policies on them.&lt;/p&gt;
    </Description>
  </Function>

  <Function 
      declaration="getAllTopPages()"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;code&gt;Page&lt;/code&gt; elements.">
    <Description>
      Gets all top-level pages in the current project. This excludes sub-pages and XOR sub-pages.
    </Description>
  </Function>

  <Function 
      declaration="getAllXorPages()"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;code&gt;Alternative&lt;/code&gt; elements.">
    <Description>
      Gets all XOR pages in the current project
    </Description>
  </Function>

  <Function 
      declaration="areUrlFragmentsEnabled()"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if enabled, &lt;code&gt;false&lt;/code&gt; if disabled.">
    <Description>
      Determines whether URL fragments are enabled in the current project.
    </Description>
  </Function>

  <Function 
      declaration="getConnectionType(Element flow)"
      returnType="String"
      returnDescr="name of the type of connection."
      scriptKinds="comp|event|vrule">
    <Description>
      Gets the type of connection made by a flow.
       &lt;p&gt;
       The connection type is a string using the following syntax:
       
       &lt;/p&gt;&lt;pre&gt;
       &lt;i&gt;source&lt;/i&gt; &lt;code&gt;To&lt;/code&gt; &lt;i&gt;target&lt;/i&gt; [&lt;code&gt;IntraPage&lt;/code&gt;|&lt;code&gt;InterPage&lt;/code&gt;]
       &lt;/pre&gt;
       
       &lt;p&gt;
       The valid sources are: &lt;code&gt;page&lt;/code&gt;, &lt;code&gt;content&lt;/code&gt;, &lt;code&gt;operation&lt;/code&gt;.&lt;br /&gt;
       The valid targets are: &lt;code&gt;Page&lt;/code&gt;, &lt;code&gt;Content&lt;/code&gt;, &lt;code&gt;Operation&lt;/code&gt;, &lt;code&gt;Area&lt;/code&gt;.&lt;br /&gt;
       The &lt;code&gt;IntraPage&lt;/code&gt;/&lt;code&gt;InterPage&lt;/code&gt; specifier is only added for connections between view components.&lt;/p&gt;
    </Description>
    <Param name="flow" descr="a &lt;code&gt;NavigationFlow&lt;/code&gt; or &lt;code&gt;DataFlow&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getHomeSiteView()"
      returnType="Element"
      returnDescr="a &lt;code&gt;SiteView&lt;/code&gt; element, absent if the project has no site views.">
    <Description>
      Gets the home site view of the current project.
    </Description>
  </Function>

  <Function 
      declaration="isHomeElement(Element element)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the element is the home.">
    <Description>
      Determines whether an element is the home of its enclosing site view.
    </Description>
    <Param name="element" descr="a possible entrance element."/>
  </Function>

  <Function 
      declaration="getHomeElement(Element siteView)"
      returnType="Element"
      returnDescr="a possible entrance element.">
    <Description>
      Gets the home element of a site view.
    </Description>
    <Usage>
      def homeElem = getHomeElement(siteView)
    </Usage>
    <Param name="siteView" descr="a &lt;code&gt;SiteView&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="isLandmarkElement(Element element)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the element is a landmark.">
    <Description>
      Determines whether an element is a landmark.
    </Description>
    <Param name="element" descr="a possible entrance element."/>
  </Function>

  <Function 
      declaration="isDefaultElement(Element element)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the element is the default.">
    <Description>
      Determines whether an element is the default one of its enclosing areas.
    </Description>
    <Param name="element" descr="a possible entrance element."/>
  </Function>

  <Function 
      declaration="getDefaultElement(Element area)"
      returnType="Element"
      returnDescr="a possible entrance element.">
    <Description>
      Gets the default element of an area.
    </Description>
    <Param name="area" descr="an &lt;code&gt;Area&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getEffectiveLocalizedElement(Element element)"
      returnType="Element">
    <Description>

    </Description>
    <Param name="element" descr=""/>
  </Function>

  <Function 
      declaration="getEffectiveMasterContainer(Element element)"
      returnType="Element"
      returnDescr="an optional &lt;code&gt;MasterContainer&lt;/code&gt; element.">
    <Description>
      Gets the master container that is affecting an element. For top-level pages, gets the master container whose content is going to
       be embedded in the page.
    </Description>
    <Param name="element" descr="an element."/>
  </Function>

  <Function 
      declaration="getClosestTopGenericPage(Element element)"
      returnType="Element"
      returnDescr="an optional &lt;code&gt;Page&lt;/code&gt; or &lt;code&gt;MasterContainer&lt;/code&gt; element.">
    <Description>
      Gets the closest ancestor of an element that is a top-level generic page.
    </Description>
    <Param name="element" descr="an element."/>
  </Function>

  <Function 
      declaration="getClosestXorSubPage(Element element)"
      returnType="Element"
      returnDescr="an optional &lt;code&gt;Page&lt;/code&gt; element.">
    <Description>
      Gets the closest ancestor of an element that is one of the pages that are part of a XOR page.
    </Description>
    <Param name="element" descr="an element."/>
  </Function>

  <Function 
      declaration="getViewComponents(Element genericPage)"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of view components, each one having a specific type.">
    <Description>
      Gets all view components enclosed into a generic page.
    </Description>
    <Param name="genericPage" descr="a &lt;code&gt;Page&lt;/code&gt; or &lt;code&gt;MasterContainer&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getFormBasedViewComponents(Element genericPage)"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;i&gt;form-based&lt;/i&gt; view components, each one having a specific type.">
    <Description>
      Gets all &lt;i&gt;form-based&lt;/i&gt; view components enclosed into a generic page.
    </Description>
    <Param name="genericPage" descr="a &lt;code&gt;Page&lt;/code&gt; or &lt;code&gt;MasterContainer&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getSubPages(Element genericPage)"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of non-top-level &lt;code&gt;Page&lt;/code&gt; elements.">
    <Description>
      Gets all sub-pages contained into a generic page.
    </Description>
    <Param name="genericPage" descr="a &lt;code&gt;Page&lt;/code&gt; or &lt;code&gt;MasterContainer&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getXorPages(Element genericPage)"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;code&gt;Alternative&lt;/code&gt; elements.">
    <Description>
      Gets all XOR pages defined into a generic page.
    </Description>
    <Param name="genericPage" descr="a &lt;code&gt;Page&lt;/code&gt; or &lt;code&gt;MasterContainer&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="isXorSubPage(Element element)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the element is a XOR sub-page, &lt;code&gt;false&lt;/code&gt; if not."
      templateTypes="page|grid|cell">
    <Description>
      Determines whether an element is one of the possible sub-pages of a XOR page.
    </Description>
    <Param name="element" descr="an element"/>
  </Function>

  <Function 
      declaration="isSelectiveRefreshViewComponent(Element viewComp)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the view components participates in selective refresh, &lt;code&gt;false&lt;/code&gt; if not.">
    <Description>
      Determines whether a view component will make itself selectively refreshable when placed in a generic page that uses selective
       refresh too.
    </Description>
    <Param name="viewComp" descr="a view component element."/>
  </Function>

  <Function 
      declaration="isSelectiveRefreshEvent(Element event)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the event may cause selective refreshes, &lt;code&gt;false&lt;/code&gt; if it only causes full refreshes.">
    <Description>
      Determines whether a view event may cause a selective refresh of its enclosing top-level generic page.
    </Description>
    <Param name="event" descr="an event element."/>
  </Function>

  <Function 
      declaration="isBpmLocalizedModel()"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if localized.">
    <Description>
      Determines whether the BPM model referenced by the current project is localized.
    </Description>
  </Function>

  <Function 
      declaration="isValidMapping(Element domainElement)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the mapping is valid."
      scriptKinds="comp|event|vrule">
    <Description>
      Determines whether a domain model element has valid mapping information attached.
       &lt;p&gt;
       This method only checks that mapping information is present, not that it is correct with regard to the database instance schema.&lt;/p&gt;
    </Description>
    <Param name="domainElement" descr="a domain model element."/>
  </Function>

  <Function 
      declaration="isDerived(Element domainElement)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the element is derived, &lt;code&gt;false&lt;/code&gt; if not."
      scriptKinds="comp|event|vrule">
    <Description>
      Determines whether a domain model element is derived.
    </Description>
    <Param name="domainElement" descr="a &lt;code&gt;Class&lt;/code&gt;, &lt;code&gt;Attribute&lt;/code&gt; or &lt;code&gt;Association&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="isSimpleDerived(Element domainElement)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if &lt;i&gt;simple-derived&lt;/i&gt;, &lt;code&gt;false&lt;/code&gt; if derived in other ways or not derived at all."
      scriptKinds="comp|event|vrule">
    <Description>
      Determines whether a domain model element is &lt;i&gt;simple-derived&lt;/i&gt;.
       &lt;p&gt;
       For example, this includes &lt;i&gt;simple imported attributes&lt;/i&gt;.&lt;/p&gt;
    </Description>
    <Param name="domainElement" descr="a &lt;code&gt;Class&lt;/code&gt;, &lt;code&gt;Attribute&lt;/code&gt; or &lt;code&gt;Association&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getSchema(Element domainElement)"
      returnType="String"
      returnDescr="a schema name, absent if not mapped."
      scriptKinds="comp|event|vrule">
    <Description>
      Gets the database schema name to which a domain model element is mapped.
    </Description>
    <Usage>
      getSchema(getById(&quot;cls1&quot;)) // &quot;public&quot;
    </Usage>
    <Param name="domainElement" descr="a &lt;code&gt;Class&lt;/code&gt;, &lt;code&gt;Attribute&lt;/code&gt; or &lt;code&gt;Association&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getFieldName(Element attrOrRole)"
      returnType="String"
      returnDescr="a field name."
      scriptKinds="comp|event|vrule|layout/comp|layout/attr">
    <Description>
      Gets the name of the runtime field associated with an attribute or association role.
    </Description>
    <Usage>
      getFieldName(getById(&quot;attr10&quot;))
    </Usage>
    <Param name="attrOrRole" descr="an &lt;code&gt;Attribute&lt;/code&gt;, &lt;code&gt;AssociationRole1&lt;/code&gt; or
            &lt;code&gt;AssociationRole2&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getCompatibleDataTypes(int sqlType)"
      returnType="List&lt;String&gt;"
      returnDescr="list of data types, in decreasing compatibility order. An empty list is returned in case of an SQL type with no
         compatible data types."
      scriptKinds="comp|event|vrule">
    <Description>
      Gets all data types that can be mapped to an SQL type.
    </Description>
    <Usage>
      getCompatibleDataTypes(java.sql.Types.DATE) // [DataType.DATE, DataType.STRING, DataType.TEXT, DataType.TIMESTAMP]
    </Usage>
    <Param name="sqlType" descr="a constant from &lt;code&gt;Types&lt;/code&gt;."/>
  </Function>

  <Function 
      declaration="isWeakRole(Element role)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if mapped as the weak role.">
    <Description>
      Determines whether an association role is mapped as the &lt;i&gt;weak role&lt;/i&gt; of its association.
       &lt;p&gt;
       The weak role is the one that is &lt;b&gt;not&lt;/b&gt; capable of maintaining the association, meaning that any change on the weak role
       will not cause the association to be updated.&lt;/p&gt;
    </Description>
    <Param name="role" descr="an &lt;code&gt;AssociationRole1&lt;/code&gt; or &lt;code&gt;AssociationRole2&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="isAliveRole(Element role)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if mapped as the alive role.">
    <Description>
      Determines whether an association role is mapped as the &lt;i&gt;alive role&lt;/i&gt; of its association.
       &lt;p&gt;
       The alive role is the one that can be used to modify the association.&lt;/p&gt;
    </Description>
    <Param name="role" descr="an &lt;code&gt;AssociationRole1&lt;/code&gt; or &lt;code&gt;AssociationRole2&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getValidationInputParameters(Element viewComp)"
      returnType="List&lt;Element&gt;"
      returnDescr="list of &lt;code&gt;InputParameter&lt;/code&gt; elements describing the inputs."
      scriptKinds="comp|vrule">
    <Description>
      Gets the input parameters required by a view component to carry out validation.
       &lt;p&gt;
       Validation input parameters are the ones required as inputs by all validation rules applied to the view component.&lt;/p&gt;
    </Description>
    <Usage>
      getValidationInputParameters(viewComp).each{ printRaw(it.asXML()) }
    </Usage>
    <Param name="viewComp" descr="a view component element."/>
  </Function>

  <Function 
      declaration="isMandatoryField(Element genericField)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the field is mandatory, &lt;code&gt;false&lt;/code&gt; it not.">
    <Description>
      Determines whether a generic field is mandatory.
       &lt;p&gt;
       Mandatory fields are recognized only with regard to the built-in validation rules that are known to enforce a value, like the
       &lt;i&gt;Mandatory Validation Rule&lt;/i&gt;.&lt;/p&gt;
    </Description>
    <Param name="genericField" descr="a &lt;code&gt;Field&lt;/code&gt;, &lt;code&gt;SelectionField&lt;/code&gt; or &lt;code&gt;MultiSelectionField&lt;/code&gt;
            element."/>
  </Function>

  <Function 
      declaration="getStyleDirectory(String style)"
      returnType="File"
      returnDescr="a directory.">
    <Description>
      Gets the directory containing the files of a Style.
    </Description>
    <Param name="style" descr="name of a Style."/>
  </Function>

  <Function 
      declaration="getLayoutParameterDeclarations(String path, LayoutType layoutType, String componentType)"
      returnType="Map&lt;String, Map&lt;String, String&gt;&gt;"
      returnDescr="map from parameter names to parameter descriptors. Each descriptor is also a map containing the following keys:
         &lt;ul&gt;&lt;li&gt;&lt;code&gt;label&lt;/code&gt; - the human-readable name of the parameter,
         &lt;/li&gt;&lt;li&gt;&lt;code&gt;type&lt;/code&gt; - name of the &quot;type&quot; of layout attribute values,
         &lt;/li&gt;&lt;li&gt;&lt;code&gt;values&lt;/code&gt; - list of valid values, separated by &lt;code&gt;|&lt;/code&gt;, for enumerative types,
         &lt;/li&gt;&lt;li&gt;&lt;code&gt;default&lt;/code&gt; - default value used when the parameter is not specified.
         &lt;/li&gt;&lt;/ul&gt;">
    <Description>
      Gets the layout parameters declared by a layout template of a Style.
    </Description>
    <Param name="path" descr="layout template path (e.g. &lt;code&gt;&quot;MyStyle/Name&quot;&lt;/code&gt;)."/>
    <Param name="layoutType" descr="type of layout for which to get an actual template."/>
    <Param name="componentType" descr="type of component for which to get an actual template or &lt;code&gt;null&lt;/code&gt;."/>
  </Function>

  <Function 
      declaration="getLayoutFile(String path, LayoutType layoutType)"
      returnType="File"
      returnDescr="a layout template file."
      templateTypes="page|screen|grid|cell|frame|comp">
    <Description>
      Gets the actual file defining a layout template for a non-component-specific layout type.
    </Description>
    <Usage>
      getLayoutFile(&quot;MyStyle/Normal&quot;, LayoutType.CELL)
    </Usage>
    <Param name="path" descr="layout template path (e.g. &lt;code&gt;&quot;MyStyle/Name&quot;&lt;/code&gt;)."/>
    <Param name="layoutType" descr="type of layout for which to get the template."/>
  </Function>

  <Function 
      declaration="getLayoutFile(String path, LayoutType layoutType, String componentType)"
      returnType="File"
      returnDescr="a layout template file."
      templateTypes="page|screen|grid|cell|frame|comp">
    <Description>
      Gets the actual file defining a layout template for a component-specific layout type.
    </Description>
    <Usage>
      getLayoutFile(&quot;MyStyle/Normal&quot;, LayoutType.COMPONENT, &quot;SimpleList&quot;)
    </Usage>
    <Param name="path" descr="layout template path (e.g. &lt;code&gt;&quot;MyStyle/Name&quot;&lt;/code&gt;)."/>
    <Param name="layoutType" descr="type of layout for which to get the template."/>
    <Param name="componentType" descr="type of component for which to get the template."/>
  </Function>

  <Function 
      declaration="getLayoutFile(String path, String customExtension)"
      returnType="File"
      returnDescr="a layout template file.">
    <Description>
      Gets an actual file defining a layout template by using a &lt;i&gt;custom&lt;/i&gt; suffix/extension.
       &lt;p&gt;
       This method is used for retrieving auxiliary templates that do not belong to any layout type. For this reason, only
       &lt;i&gt;custom&lt;/i&gt; extensions are accepted. Regular layout templates must be retrieved by passing a &lt;code&gt;LayoutType&lt;/code&gt; value.&lt;/p&gt;
    </Description>
    <Usage>
      getLayoutFile(&quot;MyStyle/Home&quot;, &quot;.helper.template&quot;)
    </Usage>
    <Param name="path" descr="layout template path (e.g. &lt;code&gt;&quot;MyStyle/Name&quot;&lt;/code&gt;)."/>
    <Param name="customExtension" descr="custom extension to use for looking up the layout template file."/>
  </Function>

  <Function 
      declaration="getStylePageFile(String path, StylePageType type)"
      returnType="File"
      returnDescr="a style page file.">
    <Description>
      Gets the actual file defining a style page for a specific style page type.
    </Description>
    <Usage>
      getStylePageFile(&quot;MyStyle/Default&quot;, StylePageType.ERROR)
    </Usage>
    <Param name="path" descr="style page path (e.g. &lt;code&gt;&quot;MyStyle/Name&quot;&lt;/code&gt;)."/>
    <Param name="type" descr="type of style page."/>
  </Function>

  <Function 
      declaration="getLayoutFileStyle(File layoutFile)"
      returnType="String"
      returnDescr="name of a Style, absent if the file is not part of any Style.">
    <Description>
      Gets the Style containing a layout template file.
    </Description>
    <Param name="layoutFile" descr="a layout template file."/>
  </Function>

  <Function 
      declaration="getDefaultLocale()"
      returnType="Element"
      returnDescr="a &lt;code&gt;Locale&lt;/code&gt; element.">
    <Description>
      Gets the default locale of the current project.
    </Description>
  </Function>

  <Function 
      declaration="getISOCode(Element locale)"
      returnType="String"
      returnDescr="an ISO code.">
    <Description>
      Gets the ISO code of a locale.
       &lt;p&gt;
       The ISO code is composed by one or two parts, separated by an underscore (&lt;code&gt;_&lt;/code&gt;):
       &lt;/p&gt;&lt;ol&gt;&lt;li&gt;language code (ISO 639-1),
       &lt;/li&gt;&lt;li&gt;country code (ISO 3166).
       &lt;/li&gt;&lt;/ol&gt;
       For more information, see Java &lt;code&gt;Locale&lt;/code&gt; class documentation.
    </Description>
    <Param name="locale" descr="a &lt;code&gt;Locale&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getLocalePattern(Element locale, String typeRef)"
      returnType="String"
      returnDescr="a Java pattern string or the empty string if no formatting is required.">
    <Description>
      Gets the pattern to use for localizing a data type using a specific locale.
    </Description>
    <Param name="locale" descr="a &lt;code&gt;Locale&lt;/code&gt; element."/>
    <Param name="typeRef" descr="type reference string."/>
  </Function>

  <Function 
      declaration="getAvailableVariables(Element element)"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;code&gt;Variable&lt;/code&gt; elements."
      scriptKinds="comp|event|vrule">
    <Description>
      Gets the variables available for usage in expressions at the location of an element.
       &lt;p&gt;
       Note that this method does &lt;i&gt;not&lt;/i&gt; take into account master containers automatically. The variables available at runtime are
       the union of those available at both the page and master container.&lt;/p&gt;
    </Description>
    <Param name="element" descr="element from which to look for available variables."/>
  </Function>

  <Function 
      declaration="getAvailableActivationExpressions(Element element)"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;code&gt;ConditionExpression&lt;/code&gt; elements."
      scriptKinds="comp|event|vrule">
    <Description>
      Gets the activation expressions available for usage at the location of an element.
       &lt;p&gt;
       Note that this method does &lt;i&gt;not&lt;/i&gt; take into account master containers automatically. The variables available at runtime are
       the union of those available at both the page and master container.&lt;/p&gt;
    </Description>
    <Param name="element" descr="element from which to look for activation expressions."/>
  </Function>

  <Function 
      declaration="getComponentBasedVariables(Element pageComp)"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;code&gt;Variable&lt;/code&gt; elements."
      scriptKinds="comp|event|vrule">
    <Description>
      Gets all variables whose value is based on a page component.
    </Description>
    <Param name="pageComp" descr="a view component element or an in-page &lt;code&gt;Module&lt;/code&gt; or &lt;code&gt;Action&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getTargetPlatforms()"
      returnType="Set&lt;String&gt;"
      returnDescr="set containing one or more platform names.">
    <Description>
      Gets the platforms that are being considered as target for the application generated by the current project.
    </Description>
    <Usage>
      getTargetPlatforms().contains(&quot;android&quot;) // true for Android
    </Usage>
  </Function>

  <Function 
      declaration="getById(String id)"
      returnType="Element"
      returnDescr="an element.">
    <Description>
      Retrieves a model element by its identifier.
    </Description>
    <Usage>
      getById(&quot;det1&quot;) // a Details
    </Usage>
    <Param name="id" descr="an identifier."/>
  </Function>

  <Function 
      declaration="getByIdOptional(String id)"
      returnType="Element"
      returnDescr="an element, absent if there is no element with the requested identifier.">
    <Description>
      Retrieves a model element by its identifier, if one exists.
    </Description>
    <Usage>
      getByIdOptional(&quot;det1&quot;) // a Details or null
    </Usage>
    <Param name="id" descr="an identifier."/>
  </Function>

  <Function 
      declaration="getContentFile(String path)"
      returnType="File"
      returnDescr="a file, possibly not existing.">
    <Description>
      Gets a content file by its path.
       &lt;p&gt;
       This method always returns an object, even if the file does not exist: in this way, the returned file can be used for writing.
       &lt;/p&gt;&lt;p&gt;
       When working with a sub-project of an Enterprise Project, the parent files from the Enterprise Project itself are also searched
       if a specific local file does not exist. In case no file exists, even at Enterprise Project level, the returned file is always
       the local one.&lt;/p&gt;
    </Description>
    <Param name="path" descr="path of the file, relative to the project directory."/>
  </Function>

  <Function 
      declaration="getContentFileOptional(String path)"
      returnType="File"
      returnDescr="a file, absent if not existing.">
    <Description>
      Gets a content file by its path, if one exists.
       &lt;p&gt;
       When working with a sub-project of an Enterprise Project, the parent files from the Enterprise Project itself are also searched
       if a specific local file does not exist.&lt;/p&gt;
    </Description>
    <Param name="path" descr="path of the file, relative to the project directory."/>
  </Function>

  <Function 
      declaration="getTopSuperDomainClass(Element dclass)"
      returnType="Element"
      returnDescr="a &lt;code&gt;Class&lt;/code&gt; element.">
    <Description>
      Gets the topmost (most generic) domain class of the generalization hierarchy to which a domain class belongs.
    </Description>
    <Usage>
      &lt;pre&gt;
       // clsC &quot;extends&quot; clsB &quot;extends&quot; clsA 
       def clsA = getTopSuperDomainClass(clsC)
       &lt;/pre&gt;
    </Usage>
    <Param name="dclass" descr="a &lt;code&gt;Class&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getSuperDomainClassHierarchy(Element dclass)"
      returnType="List&lt;Element&gt;"
      returnDescr="list of &lt;code&gt;Class&lt;/code&gt;, from the most generic to the most specific.">
    <Description>
      Gets the all domain classes in the generalization hierarchy of a domain class, including itself.
       &lt;p&gt;
       Entities in the returned list are ordered in descending order, from the most generic to the most specific.&lt;/p&gt;
    </Description>
    <Usage>
      &lt;pre&gt;
       // clsC &quot;extends&quot; clsB &quot;extends&quot; clsA
       def classes = getSuperDomainClassHierarchy(clsC) // [clsA,clsB,clsC]
       &lt;/pre&gt;
    </Usage>
    <Param name="dclass" descr="a &lt;code&gt;Class&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getSuperDomainClass(Element dclass)"
      returnType="Element"
      returnDescr="a &lt;code&gt;Class&lt;/code&gt; element, absent if the specified domain class has no generalization.">
    <Description>
      Gets the immediate super-class of a domain class, i.e. the domain class that it directly generalizes to.
    </Description>
    <Usage>
      &lt;pre&gt;
       // clsC &quot;extends&quot; clsB &quot;extends&quot; clsA
       getSuperDomainClass(clsC) // clsB
       getSuperDomainClass(clsA) // null
       &lt;/pre&gt;
    </Usage>
    <Param name="dclass" descr="a &lt;code&gt;Class&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getSourceDomainClass(Element assocOrRole)"
      returnType="Element"
      returnDescr="a &lt;code&gt;Class&lt;/code&gt; element.">
    <Description>
      Gets the source domain class of an association or association role.
    </Description>
    <Usage>
      def sourceCls = getSourceDomainClass(role)
    </Usage>
    <Param name="assocOrRole" descr="an &lt;code&gt;Association&lt;/code&gt;, &lt;code&gt;AssociationRole1&lt;/code&gt; or
            &lt;code&gt;AssociationRole2&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getTargetDomainClass(Element assocOrRole)"
      returnType="Element"
      returnDescr="a &lt;code&gt;Class&lt;/code&gt; element.">
    <Description>
      Gets the target domain class of an association or association role.
    </Description>
    <Usage>
      def targetCls = getTargetDomainClass(role)
    </Usage>
    <Param name="assocOrRole" descr="an &lt;code&gt;Association&lt;/code&gt;, &lt;code&gt;AssociationRole1&lt;/code&gt; or
            &lt;code&gt;AssociationRole2&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getKeyAttributes(Element dclass)"
      returnType="List&lt;Element&gt;"
      returnDescr="list of &lt;i&gt;key&lt;/i&gt; &lt;code&gt;Attribute&lt;/code&gt; elements, in the order dictated by their domain class.">
    <Description>
      Gets the &lt;i&gt;key&lt;/i&gt; attributes of a domain class.
       &lt;p&gt;
       This method only inspects &lt;i&gt;logical&lt;/i&gt; key attributes, as they are found in the domain model. These attributes may not be the
       only one becoming &lt;i&gt;physical&lt;/i&gt; persisted keys, since some databases require additional keys.&lt;/p&gt;
    </Description>
    <Usage>
      def attributes = getKeyAttributes(dclass)
    </Usage>
    <Param name="dclass" descr="a &lt;code&gt;Class&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getAttributes(Element dclass)"
      returnType="List&lt;Element&gt;"
      returnDescr="list of &lt;code&gt;Attribute&lt;/code&gt; elements.">
    <Description>
      Gets all the attributes of a domain class, including those inherited from super-classes.
    </Description>
    <Usage>
      def attributes = getAttributes(dclass)
    </Usage>
    <Param name="dclass" descr="a &lt;code&gt;Class&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getAttributeExpressionId(String attrExpr)"
      returnType="String"
      returnDescr="an identifier.">
    <Description>
      Computes an identifier that can be used to represent the expression of an imported or derived attribute. Plain attribute
       identifiers are returned unchanged.
    </Description>
    <Usage>
      def exprId = getAttributeExpressionId(&quot;sum(&quot; + attrId + &quot;)&quot;)
    </Usage>
    <Param name="attrExpr" descr="text of an attribute expression."/>
  </Function>

  <Function 
      declaration="isBpmLocalizedAttributeId(String id)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the identifier denotes a localized BPM attribute.">
    <Description>
      Determines whether the given identifier denotes a BPM localized attribute.
    </Description>
    <Usage>
      isBpmLocalizedAttribute(&quot;processName&quot;) // true
    </Usage>
    <Param name="id" descr="an identifier."/>
  </Function>

  <Function 
      declaration="isWritableAttribute(Element attr)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if writable, &lt;code&gt;false&lt;/code&gt; if not.">
    <Description>
      Determines whether an attribute can be allowed to be written by the application model.
    </Description>
    <Param name="attr" descr="an &lt;code&gt;Attribute&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="isChangeableAttribute(Element attr)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if changeable, &lt;code&gt;false&lt;/code&gt; if not.">
    <Description>
      Determines whether an attribute can be allowed to be changed by the application model after being assigned a value.
    </Description>
    <Param name="attr" descr="an &lt;code&gt;Attribute&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="isInputBindableAttribute(Element attr)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if bindable as an input, &lt;code&gt;false&lt;/code&gt; if not.">
    <Description>
      Determines whether an attribute can be exposed as an input parameter for binding.
    </Description>
    <Param name="attr" descr="an &lt;code&gt;Attribute&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="isOutputBindableAttribute(Element attr)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if bindable as an output, &lt;code&gt;false&lt;/code&gt; if not.">
    <Description>
      Determines whether an attribute can be exposed as an output parameter for binding.
    </Description>
    <Param name="attr" descr="an &lt;code&gt;Attribute&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getAssignableTypeExpression(Element dclass, Element attr, boolean single, boolean multiple)"
      returnType="String"
      returnDescr="a &quot;model type&quot; expression."
      scriptKinds="comp|event|vrule">
    <Description>
      Gets a type expression describing the &quot;model type&quot; of a domain class attribute. This is typically used when assigning values
       &lt;b&gt;to&lt;/b&gt; such attribute (e.g. when modeling an &lt;i&gt;input&lt;/i&gt;). When the value being assigned has a model type described by
       &lt;code&gt;#getTypeExpression&lt;/code&gt;, this enables automatic binding of the values.
       &lt;p&gt;
       The &quot;model type&quot; is a special expression logically representing the domain class attribute in the domain model. It is not
       related to the data type of the attribute values.&lt;/p&gt;
    </Description>
    <Usage>
      &lt;pre&gt;
       def cls = getById(&quot;cls1&quot;)
       def attr = getById(&quot;attr2&quot;)
       getAssignableTypeExpression(cls, attr, true, false) // &quot;cls1.attr2.single&quot;
       &lt;/pre&gt;
    </Usage>
    <Param name="dclass" descr="the &lt;code&gt;Class&lt;/code&gt; owning the attribute."/>
    <Param name="attr" descr="an &lt;code&gt;Attribute&lt;/code&gt; element."/>
    <Param name="single" descr="&lt;code&gt;true&lt;/code&gt; if single values are allowed."/>
    <Param name="multiple" descr="&lt;code&gt;true&lt;/code&gt; if multiple values are allowed."/>
  </Function>

  <Function 
      declaration="getTypeExpression(Element dclass, Element attr, boolean single, boolean multiple)"
      returnType="String"
      returnDescr="a &quot;model type&quot; expression."
      scriptKinds="comp|event|vrule">
    <Description>
      Gets a type expression describing all the &quot;model types&quot; of a domain class attribute. This is typically used when assigning
       values &lt;b&gt;from&lt;/b&gt; such attribute (e.g. when modeling an &lt;i&gt;output&lt;/i&gt;). When the parameter to which the value is being assigned
       has a model type described by &lt;code&gt;#getAssignableTypeExpression&lt;/code&gt;, this enables automatic binding of the values.
       &lt;p&gt;
       The &quot;model type&quot; is a special expression logically representing the domain class attribute in the domain model. It is not
       related to the data type of the attribute values.&lt;/p&gt;
    </Description>
    <Usage>
      &lt;pre&gt;
       // cls2 &quot;extends&quot; cls1
       def cls = getById(&quot;cls2&quot;)
       def attr = getById(&quot;attr3&quot;)
       getTypeExpression(cls, attr, false, true) // &quot;cls1.attr3|cls2.attr3&quot;
       &lt;/pre&gt;
    </Usage>
    <Param name="dclass" descr="the &lt;code&gt;Class&lt;/code&gt; owning the attribute."/>
    <Param name="attr" descr="an &lt;code&gt;Attribute&lt;/code&gt; element."/>
    <Param name="single" descr="&lt;code&gt;true&lt;/code&gt; if single values are allowed."/>
    <Param name="multiple" descr="&lt;code&gt;true&lt;/code&gt; if multiple values are allowed."/>
  </Function>

  <Function 
      declaration="getOutgoingAssociations(Element dclass)"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;code&gt;Association&lt;/code&gt; elements.">
    <Description>
      Gets all the outgoing associations of a domain class, including associations inherited from super-classes.
       &lt;p&gt;
       Outgoing associations are the ones of which the domain class is the &lt;i&gt;source&lt;/i&gt;.&lt;/p&gt;
    </Description>
    <Param name="dclass" descr="a &lt;code&gt;Class&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getDirectOutgoingAssociations(Element dclass)"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;code&gt;Association&lt;/code&gt; elements.">
    <Description>
      Gets all the outgoing associations &lt;i&gt;directly belonging&lt;/i&gt; to a domain class, thus without including inherited associations.
       &lt;p&gt;
       Outgoing associations are the ones of which the domain class is the &lt;i&gt;source&lt;/i&gt;.&lt;/p&gt;
    </Description>
    <Param name="dclass" descr="a &lt;code&gt;Class&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getIncomingAssociations(Element dclass)"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;code&gt;Association&lt;/code&gt; elements.">
    <Description>
      Gets all the incoming associations of a domain class, including associations inherited from super-classes.
       &lt;p&gt;
       Incoming associations are the ones of which the domain class is the &lt;i&gt;target&lt;/i&gt;.&lt;/p&gt;
    </Description>
    <Param name="dclass" descr="a &lt;code&gt;Class&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getDirectIncomingAssociations(Element dclass)"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;code&gt;Association&lt;/code&gt; elements.">
    <Description>
      Gets all the incoming associations &lt;i&gt;directly belonging&lt;/i&gt; to a domain class, thus without including inherited associations.
       &lt;p&gt;
       Incoming associations are the ones of which the domain class is the &lt;i&gt;target&lt;/i&gt;.&lt;/p&gt;
    </Description>
    <Param name="dclass" descr="a &lt;code&gt;Class&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getOutgoingRoles(Element dclass)"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;code&gt;AssociationRole1&lt;/code&gt; and &lt;code&gt;AssociationRole2&lt;/code&gt; elements.">
    <Description>
      Gets all the outgoing roles of a domain class, including roles inherited from super-classes.
       &lt;p&gt;
       Outgoing roles are the ones that are part of an associations of which the domain class is the &lt;i&gt;source&lt;/i&gt;.&lt;/p&gt;
    </Description>
    <Param name="dclass" descr="a &lt;code&gt;Class&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getDirectOutgoingRoles(Element dclass)"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;code&gt;AssociationRole1&lt;/code&gt; and &lt;code&gt;AssociationRole2&lt;/code&gt; elements.">
    <Description>
      Gets all the outgoing roles &lt;i&gt;directly belonging&lt;/i&gt; to a domain class, thus without including inherited roles.
       &lt;p&gt;
       Outgoing roles are the ones that are part of an associations of which the domain class is the &lt;i&gt;source&lt;/i&gt;.&lt;/p&gt;
    </Description>
    <Param name="dclass" descr="a &lt;code&gt;Class&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getIncomingRoles(Element dclass)"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;code&gt;AssociationRole1&lt;/code&gt; and &lt;code&gt;AssociationRole2&lt;/code&gt; elements.">
    <Description>
      Gets all the incoming roles of a domain class, including roles inherited from super-classes.
       &lt;p&gt;
       Incoming roles are the ones that are part of an associations of which the domain class is the &lt;i&gt;target&lt;/i&gt;.&lt;/p&gt;
    </Description>
    <Param name="dclass" descr="a &lt;code&gt;Class&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getDirectIncomingRoles(Element dclass)"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;code&gt;AssociationRole1&lt;/code&gt; and &lt;code&gt;AssociationRole2&lt;/code&gt; elements.">
    <Description>
      Gets all the incoming roles &lt;i&gt;directly belonging&lt;/i&gt; to a domain class, thus without including inherited roles.
       &lt;p&gt;
       Incoming roles are the ones that are part of an associations of which the domain class is the &lt;i&gt;target&lt;/i&gt;.&lt;/p&gt;
    </Description>
    <Param name="dclass" descr="a &lt;code&gt;Class&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getOppositeRole(Element role)"
      returnType="Element"
      returnDescr="an &lt;code&gt;AssociationRole1&lt;/code&gt; or &lt;code&gt;AssociationRole2&lt;/code&gt; element.">
    <Description>
      Gets the association role that is the opposite of another role.
       &lt;p&gt;
       Each one of two opposite roles is the inverse of the other.&lt;/p&gt;
    </Description>
    <Usage>
      &lt;pre&gt;
       def role1 = getById(roleId)
       def role2 = getOppositeRole(role1) // role1 == getOppositeRole(role2)
       &lt;/pre&gt;
    </Usage>
    <Param name="role" descr="an &lt;code&gt;AssociationRole1&lt;/code&gt; or &lt;code&gt;AssociationRole2&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getRoleByExpression(String roleExpr)"
      returnType="Element"
      returnDescr="an &lt;code&gt;AssociationRole1&lt;/code&gt; or &lt;code&gt;AssociationRole2&lt;/code&gt; element.">
    <Description>
      Gets the final role referenced by a role expression.
    </Description>
    <Usage>
      def role = getRoleByExpression(cond[&quot;role&quot;])
    </Usage>
    <Param name="roleExpr" descr="text of a role expression."/>
  </Function>

  <Function 
      declaration="getLabel(Element element)"
      returnType="String"
      returnDescr="a string containing the label."
      scriptKinds="comp|event|vrule">
    <Description>
      Gets a human-readable label for a domain class, attribute or association role.
    </Description>
    <Param name="element" descr="a &lt;code&gt;Class&lt;/code&gt;, &lt;code&gt;Attribute&lt;/code&gt;, &lt;code&gt;AssociationRole1&lt;/code&gt;,
            &lt;code&gt;AssociationRole2&lt;/code&gt;."/>
  </Function>

  <Function 
      declaration="getAttributeExpressionLabel(String attrExpr)"
      returnType="String"
      returnDescr="a string containing the label."
      scriptKinds="comp|event|vrule">
    <Description>
      Gets a human-readable label for an attribute expression.
    </Description>
    <Param name="attrExpr" descr="text of an attribute expression."/>
  </Function>

  <Function 
      declaration="getAttributeExpressionImportLabel(String attrExpr)"
      returnType="String"
      returnDescr="a string containing the label."
      scriptKinds="comp|event|vrule">
    <Description>
      Gets a human-readable label for an attribute expression that represents an imported attribute.
    </Description>
    <Param name="attrExpr" descr="text of an imported attribute expression."/>
  </Function>

  <Function 
      declaration="getConditionalExpressionPartInputName(Element conditionalExprPart)"
      returnType="String"
      returnDescr="input name as a string.">
    <Description>
      Gets the name to use for the input value that may be accepted to fill an attribute conditional expression part.
    </Description>
    <Param name="conditionalExprPart" descr="a &lt;code&gt;AttributesCondition&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getConditionalExpressionPartInputName(Element conditionalExprPart, Element attribute)"
      returnType="String"
      returnDescr="input name as a string.">
    <Description>
      Gets the name to use for the input value that may be accepted to fill a conditional expression part.
    </Description>
    <Param name="conditionalExprPart" descr="a &lt;code&gt;KeyCondition&lt;/code&gt;, &lt;code&gt;AttributesCondition&lt;/code&gt; or
            &lt;code&gt;AssociationRoleCondition&lt;/code&gt; element."/>
    <Param name="attribute" descr="one of the &lt;code&gt;Attribute&lt;/code&gt; elements tested by the conditional expression part."/>
  </Function>

  <Function 
      declaration="isRequiredConditionalExpressionPart(Element conditionalExprPart)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the conditional expression part requires a value, &lt;code&gt;false&lt;/code&gt; if not.">
    <Description>
      Determines whether it is required to supply a value for a conditional expression part.
    </Description>
    <Param name="conditionalExprPart" descr="a &lt;code&gt;KeyCondition&lt;/code&gt;, &lt;code&gt;AttributesCondition&lt;/code&gt; or
            &lt;code&gt;AssociationRoleCondition&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getKeyConditionLabel(Element keyCondition, Element dclass, Element keyAttr)"
      returnType="String"
      returnDescr="a string."
      scriptKinds="comp|event|vrule">
    <Description>
      Gets a human-readable label for a key condition.
    </Description>
    <Param name="keyCondition" descr="a &lt;code&gt;KeyCondition&lt;/code&gt; element."/>
    <Param name="dclass" descr="the &lt;code&gt;Class&lt;/code&gt; element owning the key."/>
    <Param name="keyAttr" descr="the key &lt;code&gt;Attribute&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getAttributesConditionLabel(Element attrCondition)"
      returnType="String"
      returnDescr="a string."
      scriptKinds="comp|event|vrule">
    <Description>
      Gets a human-readable label for an attribute condition.
    </Description>
    <Param name="attrCondition" descr="a &lt;code&gt;AttributesCondition&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getRoleConditionLabel(Element roleCondition, Element keyAttr)"
      returnType="String"
      returnDescr="a string."
      scriptKinds="comp|event|vrule">
    <Description>
      Gets a human-readable label for an association role condition.
    </Description>
    <Param name="roleCondition" descr="a &lt;code&gt;AssociationRoleCondition&lt;/code&gt; element."/>
    <Param name="keyAttr" descr="the key &lt;code&gt;Attribute&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getAvailableLayoutAttributeIds(Element viewComp)"
      returnType="List&lt;String&gt;"
      returnDescr="list of references corresponding to possible &lt;code&gt;layout:Attribute&lt;/code&gt; elements, in the order they should
         be laid out.">
    <Description>
      Gets the layout attributes made available by a view component.
       &lt;p&gt;
       The &quot;identifiers&quot; used by layout attributes are actually weaker &lt;b&gt;references&lt;/b&gt; that do not necessarily have a direct
       counterpart in the interaction model. It is true, however, that most layout attribute references &lt;i&gt;do&lt;/i&gt; make one-to-one
       matches with identifiers of &lt;code&gt;Attribute&lt;/code&gt; elements found in the interaction model.&lt;/p&gt;
    </Description>
    <Param name="viewComp" descr="a view component or &lt;code&gt;layout:Component&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getAvailableLayoutFieldIds(Element viewComp)"
      returnType="List&lt;String&gt;"
      returnDescr="list of references corresponding to possible &lt;code&gt;layout:Field&lt;/code&gt; elements, in the order they should be
         laid out.">
    <Description>
      Gets the layout fields made available by a view component.
       &lt;p&gt;
       The &quot;identifiers&quot; used by layout fields are actually weaker &lt;b&gt;references&lt;/b&gt; that do not necessarily have a direct counterpart
       in the interaction model. It is true, however, that most layout field references &lt;i&gt;do&lt;/i&gt; make one-to-one matches with
       identifiers of &lt;code&gt;Field&lt;/code&gt;, &lt;code&gt;SelectionField&lt;/code&gt; or &lt;code&gt;MultiSelectionField&lt;/code&gt;
       elements found in the interaction model.&lt;/p&gt;
    </Description>
    <Param name="viewComp" descr="a view component or &lt;code&gt;layout:Component&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getAvailableLayoutEventIds(Element viewComp)"
      returnType="List&lt;String&gt;"
      returnDescr="list of references corresponding to possible event elements, in the order they should be laid out.">
    <Description>
      Gets the layout events made available by a view component.
       &lt;p&gt;
       The &quot;identifiers&quot; used by layout events are actually weaker &lt;b&gt;references&lt;/b&gt; that do not necessarily have a direct counterpart
       in the interaction model. It is true, however, that most layout event references &lt;i&gt;do&lt;/i&gt; make one-to-one matches with
       identifiers of event elements found in the interaction model.&lt;/p&gt;
    </Description>
    <Param name="viewComp" descr="a view component or &lt;code&gt;layout:Component&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getSubmitLayoutEventIds(Element viewComp)"
      returnType="List&lt;String&gt;"
      returnDescr="list of references corresponding to &lt;code&gt;layout:Event&lt;/code&gt; elements."
      templateTypes="field|cell|comp">
    <Description>
      Gets the &lt;i&gt;submit&lt;/i&gt; layout events of a view component.
       &lt;p&gt;
       The &quot;identifiers&quot; used by layout events are actually weaker &lt;b&gt;references&lt;/b&gt; that do not necessarily have a direct counterpart
       in the interaction model. It is true, however, that most layout event references &lt;i&gt;do&lt;/i&gt; make one-to-one matches with
       identifiers of event elements found in the interaction model.&lt;/p&gt;
    </Description>
    <Param name="viewComp" descr="a view component or &lt;code&gt;layout:Component&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getStyle(Element element)"
      returnType="String"
      returnDescr="name of a Style, typically corresponding to the name of a Style Project.">
    <Description>
      Gets the Style that is &lt;i&gt;in effect&lt;/i&gt; at an element.
       &lt;p&gt;
       The Style &lt;i&gt;in effect&lt;/i&gt; at an element may be also &lt;i&gt;defined&lt;/i&gt; by the element itself or, as is often the case, inherited
       from an ancestor element.&lt;/p&gt;
    </Description>
    <Param name="element" descr="an element."/>
  </Function>

  <Function 
      declaration="getLayout(Element element, LayoutType layoutType)"
      returnType="LayoutInfo"
      returnDescr="a layout information object. The object is a bean with the following properties:
         &lt;ul&gt;&lt;li&gt;&lt;code&gt;path&lt;/code&gt; which is the path of the layout template, &lt;/li&gt;&lt;li&gt;&lt;code&gt;parameters&lt;/code&gt; which are the layout parameters
         associated with the template.
         &lt;/li&gt;&lt;/ul&gt;"
      templateTypes="page|screen|grid|cell|frame|comp|event">
    <Description>
      Gets the layout information &lt;i&gt;in effect&lt;/i&gt; at an element for a specific layout type.
       &lt;p&gt;
       The information &lt;i&gt;in effect&lt;/i&gt; at an element may be also &lt;i&gt;defined&lt;/i&gt; by the element itself or, as is often the case,
       inherited from an ancestor element.&lt;/p&gt;
    </Description>
    <Usage>
      &lt;pre&gt;
       def eventLayout = getLayout(event, LayoutType.EVENT)
       def path = eventLayout.path
       def params = eventLayout.parameters
       &lt;/pre&gt;
    </Usage>
    <Param name="element" descr="an element."/>
    <Param name="layoutType" descr="type of layout for which to get information."/>
  </Function>

  <Function 
      declaration="getStylePage(Element element, StylePageType stylePageType)"
      returnType="String"
      returnDescr="a style page path.">
    <Description>
      Gets the style page of a specific type &lt;i&gt;in effect&lt;/i&gt; at an element.
       &lt;p&gt;
       The style page &lt;i&gt;in effect&lt;/i&gt; at an element may be also &lt;i&gt;defined&lt;/i&gt; by the element itself or, as is often the case,
       inherited from an ancestor element.&lt;/p&gt;
    </Description>
    <Usage>
      getStylePage(getById(&quot;sv1&quot;), StylePageType.EXPIRE) // &quot;MyStyle/Default&quot;
    </Usage>
    <Param name="element" descr="an element."/>
    <Param name="stylePageType" descr="type of style page for which to get information."/>
  </Function>

  <Function 
      declaration="getViewComponent(Element layoutElement)"
      returnType="Element"
      returnDescr="an optional view component element, of a specific type."
      templateTypes="attr|cell|field|frame|event|comp">
    <Description>
      Gets the interaction view component associated with a layout element.
       &lt;p&gt;
       A layout element may be directly associated with a view component or be contained within another layout element that is
       associated with a view component. This method is able to find the view components in all cases.&lt;/p&gt;
    </Description>
    <Usage>
      &lt;pre&gt;
       def viewComp = getViewComponent(layoutComp)
       def viewComp = getViewComponent(layoutAttr)
       &lt;/pre&gt;
    </Usage>
    <Param name="layoutElement" descr="a layout model element."/>
  </Function>

  <Function 
      declaration="getInteractionElement(Element layoutElement)"
      returnType="Element"
      returnDescr="an optional interaction element."
      templateTypes="attr|field|frame|event|page|screen|cell|comp">
    <Description>
      Gets the interaction model element associated with a layout element.
       &lt;p&gt;
       Layout elements may be associated with multiple interaction elements. For example, a &lt;code&gt;layout:Attribute&lt;/code&gt; is
       typically associated with both an attribute and a view component. In such cases, this method will always retrieve the most
       specific interaction element.
       &lt;/p&gt;&lt;p&gt;
       The opposite is also true: some layout elements, such as &lt;code&gt;layout:Grid&lt;/code&gt;, are purely structural and not
       associated with any interaction element.&lt;/p&gt;
    </Description>
    <Usage>
      &lt;pre&gt;
       def attr = getInteractionElement(layoutAttr)
       def field = getInteractionElement(layoutField)
       def event = getInteractionElement(layoutEvent)
       &lt;/pre&gt;
    </Usage>
    <Param name="layoutElement" descr="a layout model element."/>
  </Function>

  <Function 
      declaration="getLayoutComponentsByType(Element layoutElement, String componentType)"
      returnType="List&lt;Element&gt;"
      returnDescr="list of &lt;code&gt;layout:Component&lt;/code&gt; elements, in physical DOM order."
      templateTypes="cell">
    <Description>
      Gets all the layout components of a specific type found inside a layout model element.
    </Description>
    <Usage>
      def detailComponents = getLayoutComponentsByType(cell, &quot;Details&quot;)
    </Usage>
    <Param name="layoutElement" descr="a layout model element."/>
    <Param name="componentType" descr="type of component for which to get layout components."/>
  </Function>

  <Function 
      declaration="getSubmitLayoutEvents(Element layoutField, boolean useInteractionEventOrder)"
      returnType="List&lt;Element&gt;"
      returnDescr="list of &lt;code&gt;layout:Event&lt;/code&gt; elements, in the order dictated by the boolean parameter."
      templateTypes="field|cell|comp">
    <Description>
      Gets the &lt;i&gt;submit&lt;/i&gt; layout events affecting a layout field.
       &lt;p&gt;
       Events are sorted according to their layout ordering or, if placed individually, by their physical DOM position. It is possible
       to use the order specified for the corresponding interaction events by passing an optional boolean flag.&lt;/p&gt;&lt;p&gt;If the second parameter is not specified, it defaults to &lt;code&gt;false&lt;/code&gt; (layout events order).&lt;/p&gt;
    </Description>
    <Param name="layoutField" descr="a &lt;code&gt;layout:Field&lt;/code&gt; element."/>
    <Param name="useInteractionEventOrder" descr="&lt;code&gt;true&lt;/code&gt; for using interaction event order, &lt;code&gt;false&lt;/code&gt; for using layout events order."/>
  </Function>

  <Function 
      declaration="expandLayoutComponent(Element layoutComp)"
      returnType="Element"
      returnDescr="expanded &lt;code&gt;layout:Component&lt;/code&gt; element.">
    <Description>
      Expands the model of a layout component using plug-in logic.
    </Description>
    <Param name="layoutComp" descr="a &lt;code&gt;layout:Component&lt;/code&gt; element, which may be modified directly."/>
  </Function>

  <Function 
      declaration="expandLayoutAttribute(Element layoutAttr)"
      returnType="Element"
      returnDescr="expanded &lt;code&gt;layout:Attribute&lt;/code&gt; element.">
    <Description>
      Expands the model of a layout attribute using plug-in logic.
    </Description>
    <Param name="layoutAttr" descr="a &lt;code&gt;layout:Attribute&lt;/code&gt; element, which may be modified directly."/>
  </Function>

  <Function 
      declaration="expandLayoutField(Element layoutField)"
      returnType="Element"
      returnDescr="expanded &lt;code&gt;layout:Field&lt;/code&gt; element.">
    <Description>
      Expands the model of a layout field using plug-in logic.
    </Description>
    <Param name="layoutField" descr="a &lt;code&gt;layout:Field&lt;/code&gt; element, which may be modified directly."/>
  </Function>

  <Function 
      declaration="expandLayoutEvent(Element layoutEvent)"
      returnType="Element"
      returnDescr="expanded &lt;code&gt;layout:Event&lt;/code&gt; element.">
    <Description>
      Expands the model of a layout event using plug-in logic.
    </Description>
    <Param name="layoutEvent" descr="a &lt;code&gt;layout:Event&lt;/code&gt; element, which may be modified directly."/>
  </Function>

  <Function 
      declaration="getLayoutId(Element layoutElement)"
      returnType="String"
      returnDescr="a string identifier.">
    <Description>
      Gets an identifier for a layout element.
       &lt;p&gt;
       This is suitable for uniquely identifying elements of the layout model, which may be present in multiple instances in the same
       layout model while all referring to the same interaction element. This also works for containers, such as
       &lt;code&gt;layout:Grid&lt;/code&gt; and &lt;code&gt;layout:Cell&lt;/code&gt; elements, which completely lack an identifier.
       &lt;/p&gt;&lt;p&gt;
       Please note that non-layout elements other than &lt;code&gt;Page&lt;/code&gt; or &lt;code&gt;MasterContainer&lt;/code&gt; are not
       accepted by this method. For them, just read the element &lt;code&gt;id&lt;/code&gt; attribute.&lt;/p&gt;
    </Description>
    <Param name="layoutElement" descr="a layout model element."/>
  </Function>

  <Function 
      declaration="getLayoutAttributeItem(Element layoutAttr)"
      returnType="String"
      returnDescr="a runtime view variable name.">
    <Description>
      Gets the name of the runtime view variable which holds the item from which the value of a layout attribute should be read.
    </Description>
    <Param name="layoutAttr" descr="a &lt;code&gt;layout:Attribute&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getAllActionDefinitions()"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;code&gt;ActionDefinition&lt;/code&gt; elements.">
    <Description>
      Gets all action definitions in the current project.
    </Description>
  </Function>

  <Function 
      declaration="getAllActions()"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;code&gt;Action&lt;/code&gt; elements.">
    <Description>
      Gets all action in the current project.
    </Description>
  </Function>

  <Function 
      declaration="getAllFloatingEvents()"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;i&gt;floating&lt;/i&gt; event elements, each one having a specific type.">
    <Description>
      Gets all &lt;i&gt;floating&lt;/i&gt; events in the current project.
    </Description>
  </Function>

  <Function 
      declaration="getAllFlows()"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;code&gt;NavigationFlow&lt;/code&gt;, &lt;code&gt;DataFlow&lt;/code&gt;, &lt;code&gt;SuccessFlow&lt;/code&gt;
         and &lt;code&gt;ErrorFlow&lt;/code&gt; elements.">
    <Description>
      Gets all flows in the current project.
    </Description>
  </Function>

  <Function 
      declaration="getAllModules()"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;code&gt;Module&lt;/code&gt; elements.">
    <Description>
      Gets all modules in the current project.
    </Description>
  </Function>

  <Function 
      declaration="getAllOperations()"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of operation elements, each one having a specific type.">
    <Description>
      Gets all operation &lt;i&gt;instances&lt;/i&gt; in the current project.
    </Description>
  </Function>

  <Function 
      declaration="getAllPortDefinitions()"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of &lt;code&gt;InputPortDefinition&lt;/code&gt;, &lt;code&gt;OutputPortDefinition&lt;/code&gt;,
         &lt;code&gt;SuccessPortDefinition&lt;/code&gt; and &lt;code&gt;ErrorPortDefinition&lt;/code&gt; elements.">
    <Description>
      Gets all port definitions in the current project.
    </Description>
  </Function>

  <Function 
      declaration="getAllValidationRules()"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of validation rule elements, each one having a specific type.">
    <Description>
      Gets all validation rule &lt;i&gt;instances&lt;/i&gt; in the current project.
    </Description>
  </Function>

  <Function 
      declaration="getAllViewComponents()"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of view component elements, each one having a specific type.">
    <Description>
      Gets all view component &lt;i&gt;instances&lt;/i&gt; in the current project.
    </Description>
  </Function>

  <Function 
      declaration="getEnteringFlows(Element element, FlowType... types)"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of flows of the requested types.">
    <Description>
      Gets all flows &lt;i&gt;entering&lt;/i&gt; into an element. Entering flows include all flows that directly point to the element or to its
       descendants, the latter as long as they come from outside the element.
    </Description>
    <Usage>
      getEnteringFlows(getById(&quot;page3&quot;), FlowType.NAVIGATION)
    </Usage>
    <Param name="element" descr="element into which flows enter."/>
    <Param name="types" descr="types of flows to get; if none is specified, all flows are considered."/>
  </Function>

  <Function 
      declaration="getExitingFlows(Element element, FlowType... types)"
      returnType="Collection&lt;Element&gt;"
      returnDescr="collection of flows of the requested types.">
    <Description>
      Gets all flows &lt;i&gt;exiting&lt;/i&gt; from an element. Exiting flows include all flows that directly depart from the element or from its
       descendants, the latter as long as they go outside the element.
    </Description>
    <Usage>
      getExitingFlows(getById(&quot;page3&quot;), FlowType.NAVIGATION)
    </Usage>
    <Param name="element" descr="element from which flows exit."/>
    <Param name="types" descr="types of flows to get; if none is specified, all flows are considered."/>
  </Function>

  <Function 
      declaration="getOutputParameters(Element element)"
      returnType="List&lt;Element&gt;"
      returnDescr="list of &lt;code&gt;OutputParameter&lt;/code&gt; elements describing the outputs."
      scriptKinds="comp|event|vrule">
    <Description>
      Gets the output parameters of an element.
    </Description>
    <Param name="element" descr="an element that can be connected to flows."/>
  </Function>

  <Function 
      declaration="getEffectiveSecureElement(Element element)"
      returnType="Element"
      returnDescr="an optional &lt;i&gt;secure&lt;/i&gt; element making the passed one secure.">
    <Description>
      Gets the &lt;i&gt;secure&lt;/i&gt; element, if any, that is causing an element to be secure. May be the passed element itself.
    </Description>
    <Param name="element" descr="an element."/>
  </Function>

  <Function 
      declaration="getEffectiveProtectedElement(Element element)"
      returnType="Element"
      returnDescr="an optional &lt;i&gt;protected&lt;/i&gt; element making the passed one secure.">
    <Description>
      Gets the &lt;i&gt;protected&lt;/i&gt; element, if any, that is causing an element to be protected. May be the passed element itself.
    </Description>
    <Param name="element" descr="an element."/>
  </Function>

  <Function 
      declaration="getClosestAccessAwareElement(Element element)"
      returnType="Element"
      returnDescr="an optional &lt;i&gt;access-aware&lt;/i&gt; element.">
    <Description>
      Gets the closest ancestor of an element that is &lt;i&gt;access-aware&lt;/i&gt;.
    </Description>
    <Param name="element" descr="an element."/>
  </Function>

  <Function 
      declaration="isFloatingEvent(Element element)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the element is a floating event, &lt;code&gt;false&lt;/code&gt; if not.">
    <Description>
      Determines whether an element is a &lt;i&gt;floating&lt;/i&gt; event.
       &lt;p&gt;
       Floating events are stand-alone model elements, not attached to any other element. The opposite are &lt;i&gt;boundary events&lt;/i&gt;.&lt;/p&gt;
    </Description>
    <Param name="element" descr="an element."/>
  </Function>

  <Function 
      declaration="isOperation(Element element)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the element is an operation, &lt;code&gt;false&lt;/code&gt; if not."
      scriptKinds="comp|vrule">
    <Description>
      Determines whether an element is an operation.
       &lt;p&gt;
       An operation may be either
       &lt;/p&gt;&lt;ul&gt;&lt;li&gt;an instance of a &lt;i&gt;operation component type&lt;/i&gt; or,
       &lt;/li&gt;&lt;li&gt;an instance of an &lt;i&gt;hybrid component type&lt;/i&gt; used outside of view containers.
       &lt;/li&gt;&lt;/ul&gt;
    </Description>
    <Param name="element" descr="an element."/>
  </Function>

  <Function 
      declaration="isViewComponent(Element element)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the element is a view component, &lt;code&gt;false&lt;/code&gt; if not."
      scriptKinds="comp|vrule">
    <Description>
      Determines whether an element is a view component.
       &lt;p&gt;
       A view component may be either
       &lt;/p&gt;&lt;ul&gt;&lt;li&gt;an instance of a &lt;i&gt;view component type&lt;/i&gt; or,
       &lt;/li&gt;&lt;li&gt;an instance of an &lt;i&gt;hybrid component type&lt;/i&gt; used inside a view container.
       &lt;/li&gt;&lt;/ul&gt;
    </Description>
    <Param name="element" descr="an element."/>
  </Function>

  <Function 
      declaration="isFormBased(Element viewComp)"
      returnType="boolean"
      returnDescr="&lt;code&gt;true&lt;/code&gt; if the view component is &lt;i&gt;form-based&lt;/i&gt;, &lt;code&gt;false&lt;/code&gt; if not.">
    <Description>
      Determines whether a view component is &lt;i&gt;form-based&lt;/i&gt;, that is, accessing user-editable &quot;form&quot; properties as part of its
       computation.
    </Description>
    <Param name="viewComp" descr="a view component element."/>
  </Function>

  <Function 
      declaration="getClassName(Element dclass)"
      returnType="String"
      returnDescr="a class name."
      scriptKinds="comp|event|vrule">
    <Description>
      Gets the runtime class name associated with a domain class.
       &lt;p&gt;
       The class name is generated from the domain class name or, if not available, from the domain class id.&lt;/p&gt;
    </Description>
    <Usage>
      getClassName(getById(&quot;cls1&quot;))
    </Usage>
    <Param name="dclass" descr="a &lt;code&gt;Class&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getClassInfo(Element dclass)"
      returnType="ClassInfo"
      returnDescr="a runtime class information object. The object is a bean with the following properties:
         &lt;ul&gt;&lt;li&gt;&lt;code&gt;name&lt;/code&gt; which is the full class name,
         &lt;/li&gt;&lt;li&gt;&lt;code&gt;packageName&lt;/code&gt; which contains only the &quot;package&quot; part of the name,
         &lt;/li&gt;&lt;li&gt;&lt;code&gt;simpleName&lt;/code&gt; which contains only the terminal &quot;class&quot; part of the name,
         &lt;/li&gt;&lt;li&gt;&lt;code&gt;path&lt;/code&gt; which contains the directory path of the class file,
         &lt;/li&gt;&lt;li&gt;&lt;code&gt;mappedName&lt;/code&gt; which contains the actual mapped name, which is fully qualified according to
         &lt;code&gt;#useQualifiedClassNames&lt;/code&gt;.
         &lt;/li&gt;&lt;/ul&gt;"
      scriptKinds="comp|event|vrule">
    <Description>
      Gets information about the runtime class associated with a domain class.
    </Description>
    <Usage>
      getClassInfo(getById(&quot;cls1&quot;))
    </Usage>
    <Param name="dclass" descr="a &lt;code&gt;Class&lt;/code&gt; element."/>
  </Function>

  <Function 
      declaration="getPackageName()"
      returnType="String"
      returnDescr="a runtime package name.">
    <Description>
      Gets the name of the base runtime package containing all domain model elements.
    </Description>
  </Function>

  <Function 
      declaration="getPackageName(Element domainElement)"
      returnType="String"
      returnDescr="a Java package name.">
    <Description>
      Gets the name of the runtime package containing a domain model element.
    </Description>
    <Usage>
      def package = getPackageName(dclass)
    </Usage>
    <Param name="domainElement" descr="a domain model element."/>
  </Function>

  <Function 
      declaration="getFieldName(String attrOrRoleExpr)"
      returnType="String"
      returnDescr="a field name."
      scriptKinds="comp|event|vrule|layout/comp|layout/attr">
    <Description>
      Gets the name of the runtime field associated with an attribute expression or association role expression.
    </Description>
    <Usage>
      getFieldName(getById(&quot;attr10&quot;))
    </Usage>
    <Param name="attrOrRoleExpr" descr="an attribute or association role expression."/>
  </Function>

  <Function 
      declaration="getFileEncoding(String path)"
      returnType="String"
      returnDescr="a character set, absent if the file has no one specified."
      scriptKinds="comp|event|vrule|rtx">
    <Description>
      Gets the character set to use for reading a &lt;i&gt;text&lt;/i&gt; content file.
    </Description>
    <Param name="path" descr="path of the file, relative to the project directory."/>
  </Function>

  <!-- #EndGenerated -->
  
</Root>
