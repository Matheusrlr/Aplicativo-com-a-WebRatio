<?xml version="1.0" encoding="UTF-8"?>

<Component type="content" formBased="false" idPrefix="inu" namePrefix="Simple List " label="Simple List" dataFlowSource="true" navigationFlowSource="true" dataFlowTarget="true" navigationFlowTarget="true"  errorFlowTarget="true"  successFlowTarget="true" canPlaceLayoutComponent="true"> 
  <DomainClassProperty attributeName="dataBinding" includeDerived="true" figureDisplayOrder="1"> 
    <Description xml:space="preserve">The class from which the content of the component is drawn.</Description> 
  </DomainClassProperty>  
  <ConditionalExpression classIdExpr="../../@dataBinding" elementName="ConditionalExpression" defaultPolicy="true" figureDisplayOrder="2"> 
    <Description xml:space="preserve">The set of selection criteria that retrieves the instances of the class of the component.</Description> 
  </ConditionalExpression>  
  <AttributesProperty classIdExpr="@dataBinding" attributeName="displayAttributes" includeDerived="true" enabledImportExtraAttributes="true"> 
    <Description xml:space="preserve">The list of class attributes displayed by the component.</Description>  
    <IsEnabled>return (element["dataBinding"] != "")</IsEnabled> 
  </AttributesProperty>  
  <SortAttributesProperty label="Sort Attributes" elementName="SortAttribute" attributeName="attribute" classIdExpr="@dataBinding" attributeIdsExpr="@displayAttributes"> 
    <Description xml:space="preserve">The sorting criteria used to display the objects in the simple list.</Description>  
    <IsEnabled>return (element["dataBinding"] != "")</IsEnabled> 
  </SortAttributesProperty>  
  <IntegerProperty attributeName="maxResults"> 
    <Description xml:space="preserve">The maximum number of rows to retrieve.
If unspecified, all rows are retrieved.</Description> 
  </IntegerProperty>  
  <BooleanProperty attributeName="distinct"> 
    <Description xml:space="preserve">If checked, objects with duplicate attribute values are removed
from the content of the simple list.</Description> 
  </BooleanProperty>  
  <Description xml:space="preserve">Simple lists present multiple instances of a class as a list and permit 
the user to select an object from such list. 
An Simple List specification consists of two parts:
&lt;ul&gt;
  &lt;li&gt;The specification of the class to which the component refers and, optionally, 
of a conditional expression used to restrict the set of instances contributing to the content 
of the component.&lt;/li&gt;
  &lt;li&gt;The selection of the attributes to be included in the component.&lt;/li&gt;
&lt;/ul&gt;</Description>  
  <InputDescription xml:space="preserve" name="Current Object">The set of key attributes values of the object that define the current 
object selected.</InputDescription>  
  <InputDescription xml:space="preserve" name="Condition-Name">The parameter associated to one of the Conditional Expressions 
of the component.</InputDescription>  
  <OutputDescription xml:space="preserve" name="Attribute-Name">The value of one of the class attributes for the object selected
from the Simple List.</OutputDescription>  
  <OutputDescription xml:space="preserve" name="ForeignKey-Name">The value for one of the foreign key attributes of the object 
connected to the object selected.</OutputDescription>  
  <OutputDescription xml:space="preserve" name="Data Size">The number of class state objects retrieved by the query.</OutputDescription>  
  <LayoutAttributes xml:space="preserve">return component.attributeValue("displayAttributes", "").tokenize(" ")</LayoutAttributes>  
  <IsContextFreeComponent xml:space="preserve">def incomingLinks = getIncomingFlows(component)

if(incomingLinks.empty){
  return true
}

def currentPrefix = component["id"] + ".current"
for(link in incomingLinks){
    def parameterBindings = link.selectNodes("ParameterBinding")
    def automaticLinkParams = parameterBindings.empty ? getIncomingFlows(link) : []
    if (!parameterBindings.empty)  {
       if (parameterBindings.any{!it["target"].startsWith(currentPrefix)}) {
           return false
      }
   } else {
       if (automaticLinkParams.any{!it.target.startsWith(currentPrefix)}) {
           return false
      }
   }
}


return true


</IsContextFreeComponent>    <IsMultiConditionComponent xml:space="preserve">if (getIncomingFlows(component).size() &lt;= 1) {
    return false
}

def sel = component.element("ConditionalExpression")
if(sel == null){
  return false
}
def count = sel.elements("AssociationRoleCondition").size() + sel.elements("KeyCondition").size()
for (cond in sel.elements("AttributesCondition")) {
    def pred = cond["predicate"]
    if ((cond["value"] == "") &amp;&amp; !isUnaryPredicate(pred)) {
        count++
    }
}
return count &gt; 1</IsMultiConditionComponent>  
  <AutoExpand xml:space="preserve">
  import org.dom4j.Element

  def domainClass = getById(component["dataBinding"])
  
  for(link in getExitingFlows(component, FlowType.NAVIGATION)){
     def connectionType = getConnectionType(link)
     if(connectionType == "contentToContentIntraPage"){
       if(link["automaticCoupling"] == "true"){
           def i = 1
           for(par in getAutomaticParameterBindings(link)){
               Element curPar = link.addElement("ParameterBinding");
               curPar.addAttribute("id", link["id"] + "_par" + i)
               curPar.addAttribute("source", par["source"])
               curPar.addAttribute("target", par["target"])
               i++
           }
           link["automaticCoupling"] = "false"
       }
       if(component["distinct"] != "true"){
          for (a in getKeyAttributes(domainClass)) {
              Element curPar = link.addElement("ParameterBinding");
              curPar.addAttribute("id", link["id"] + "_" + a["id"])
              curPar.addAttribute("source", "data[]." + a["id"])
              curPar.addAttribute("target", component["id"] + ".current." + a["id"])
          }
       }
     }
  }
</AutoExpand>    <BeanDescription xml:space="preserve">
	&lt;p&gt;The component state object for the Simple List consists of the following properties:
	   &lt;ul&gt;
  		&lt;li&gt;&lt;code&gt;int dataSize&lt;/code&gt;: the number of class state objects&lt;/li&gt;
  		&lt;li&gt;&lt;code&gt;List data&lt;/code&gt;: the list of class state objects&lt;/li&gt;
  		&lt;li&gt;&lt;code&gt;int currentIndex&lt;/code&gt;: the zero-based index of the current class state object&lt;/li&gt;
  	   &lt;/ul&gt;
	&lt;/p&gt;
	&lt;p&gt;The class state object depends on the class the component is based on. For example, the class 
	&lt;i&gt;Product&lt;/i&gt; of Acme application is associated with a state object having the following properties:
	   &lt;ul&gt;
  		&lt;li&gt;&lt;code&gt;Integer OID&lt;/code&gt;: the value of the &lt;i&gt;oid&lt;/i&gt; attribute&lt;/li&gt;
  		&lt;li&gt;&lt;code&gt;Integer code&lt;/code&gt;: the value of the &lt;i&gt;code&lt;/i&gt; attribute&lt;/li&gt;
  		&lt;li&gt;&lt;code&gt;String description&lt;/code&gt;: the value of the &lt;i&gt;description&lt;/i&gt; attribute&lt;/li&gt;
  		&lt;li&gt;&lt;code&gt;String name&lt;/code&gt;: the value of the &lt;i&gt;name&lt;/i&gt; attribute&lt;/li&gt;
  		&lt;li&gt;&lt;code&gt;Double price&lt;/code&gt;: the value of the &lt;i&gt;price&lt;/i&gt; attribute&lt;/li&gt;
  		&lt;li&gt;&lt;code&gt;Object thumbnail&lt;/code&gt;: the value of the &lt;i&gt;thumbnail&lt;/i&gt; attribute&lt;/li&gt;
  		&lt;li&gt;&lt;code&gt;Boolean highlighted&lt;/code&gt;: the value of the &lt;i&gt;highlighted&lt;/i&gt; attribute&lt;/li&gt;
  	   &lt;/ul&gt;
	&lt;/p&gt;
</BeanDescription> </Component>