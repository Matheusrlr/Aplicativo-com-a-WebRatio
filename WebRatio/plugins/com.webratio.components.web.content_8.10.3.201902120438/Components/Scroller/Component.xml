<?xml version="1.0" encoding="UTF-8"?>

<Component type="content" formBased="false" idPrefix="scu" namePrefix="Scroller " label="Scroller" dataFlowSource="true" navigationFlowSource="true" dataFlowTarget="true" navigationFlowTarget="true"  errorFlowTarget="true"  successFlowTarget="true" canPlaceLayoutComponent="true"> 
  <DomainClassProperty attributeName="dataBinding" includeDerived="true" figureDisplayOrder="1"> 
    <Description xml:space="preserve">The class from which the content of the component is drawn.</Description> 
  </DomainClassProperty>  
  <ConditionalExpression classIdExpr="../../@dataBinding" elementName="ConditionalExpression" defaultPolicy="true" figureDisplayOrder="2"> 
    <Description xml:space="preserve">The set of selection criteria that retrieves the instances of the class of the component.</Description> 
  </ConditionalExpression>  
  <SortAttributesProperty label="Sort Attributes" elementName="SortAttribute" attributeName="attribute" classIdExpr="@dataBinding"> 
    <Description xml:space="preserve">The sorting criteria used to display the objects in the component.</Description>  
    <IsEnabled>return (element["dataBinding"] != "")</IsEnabled> 
  </SortAttributesProperty>  
  <IntegerProperty attributeName="blockFactor"> 
    <Description xml:space="preserve">A numerical value specifying how many objects at a time
are scrolled.</Description> 
  </IntegerProperty>  
  <BooleanProperty label="Use Count Query" attributeName="useCountQuery" defaultValue="false"> 
    <IsEnabled>return (element["blockFactor"] != "")</IsEnabled>  
    <Description xml:space="preserve">If true a secondary query is executed to count the number of selected rows in case the block factor has been set.
    This option permits to speedup the component's computation in case of large amounts of data.
    </Description> 
  </BooleanProperty>  
  <IntegerProperty attributeName="blockWindow"> 
    <Description xml:space="preserve">A numerical value specifying the maximum number of flows available to jump to other result blocks.
Assuming that N is the value of this property, the
component will show N-1 block flows before the current block, and
N-1 block flows after the current block. If this property is
unspecified, all the block flows are shown.</Description> 
  </IntegerProperty>  
  <IntegerProperty attributeName="maxResults"> 
    <Description xml:space="preserve">The maximum number of rows to retrieve.
If unspecified, all rows are retrieved.</Description> 
  </IntegerProperty>  
  <Description xml:space="preserve">Scrollers provide commands to scroll through the objects in a sequence, e.g., 
all the instances of a class. 
Four flows are provided by default in the rendering of the component: 
the flow to the first element of the sequence, to the last element of the 
sequence, and to the element that precedes/follows the currently shown item.
A scroller specification consists of the specification of the class 
to which the component refers and, optionally, of a conditional expression used to restrict 
the set of instances contributing to the content of the component.</Description>  
  <InputDescription xml:space="preserve" name="Current Object">The set of key attributes values of the object that define the current 
selected object (available if not use count query).</InputDescription>  
  <InputDescription xml:space="preserve" name="Condition-Name">The parameter associated to one of the Conditional Expressions
of the component.</InputDescription>  
  <InputDescription xml:space="preserve" name="Block Factor">A numerical value specifying how many objects at a time are scrolled. 
If this property is unspecified or set to -1, all the available rows are returned.</InputDescription>  
  <InputDescription xml:space="preserve" name="Block Window">A numerical value specifying the maximum number of flows available to jump to other result blocks.
Assuming that N is the value of this property, the
component will show N-1 block flows before the current block, and
N-1 block flows after the current block. If this property is
unspecified or set to -1, all the block flows are shown.</InputDescription>  
  <OutputDescription xml:space="preserve" name="Selected Objects">The key attributes values of the objects chosen from the Scroller.</OutputDescription>  
  <LayoutEvents xml:space="preserve">
def links = []  
links.add(component["id"] + "First")
links.add(component["id"] + "Previous")
links.add(component["id"] + "Block")
links.add(component["id"] + "Next")
links.add(component["id"] + "Last")
return links
  </LayoutEvents>  
  <IsContextFreeComponent xml:space="preserve">
def incomingLinks = getIncomingFlows(component).findAll{it["_exp"] != "t"}
if(incomingLinks.empty){
  return true
}
def currentPrefix = component["id"] + ".scroller"
for(link in incomingLinks){
    def parameterBindings = link.selectNodes("ParameterBinding")
    def automaticLinkParams = parameterBindings.empty ? getAutomaticParameterBindings(link) : []
    if (!parameterBindings.empty)  {
      if (parameterBindings.any{!it["target"].startsWith(currentPrefix)}) {
           return false
      }
   } else {
      if (automaticLinkParams.any{!it.target.startsWith(currentPrefix)}) {
           return false
      }
   }
}
return true

</IsContextFreeComponent>    <IsMultiConditionComponent xml:space="preserve">
def incomingLinks = getIncomingFlows(component).findAll{it["_exp"] != "t"}
if (incomingLinks.size() &lt;= 1) {
    return false
}

def sel = component.element("ConditionalExpression")
if(sel == null){
  return false
}
def count = sel.elements("AssociationRoleCondition").size() + sel.elements("KeyCondition").size()
for (cond in sel.elements("AttributesCondition")) {
    def pred = cond["predicate"]
    if ((cond["value"] == "") &amp;&amp; !isUnaryPredicate(pred)) {
        count++
    }
}
return count &gt; 1
</IsMultiConditionComponent>    <AutoExpand xml:space="preserve">
  for (navFlow in component.selectNodes("Events/*/NavigationFlow")) {
    def event = navFlow.parent
    navFlow.name = "DataFlow"
    component.add(navFlow.detach())
    if (!event.element("NavigationFlow")) {
      event.detach()
    }
  }
  def useSelectiveRefresh = isSelectiveRefreshViewComponent(component)
  addScrollEvents(component, useSelectiveRefresh, false)
</AutoExpand>    <BeanDescription xml:space="preserve">
	&lt;p&gt;The component state object for the Scroller consists of the following properties:
	   &lt;ul&gt;
  		&lt;li&gt;&lt;code&gt;int dataSize&lt;/code&gt;: the number of class state objects included within the current block&lt;/li&gt;
  		&lt;li&gt;&lt;code&gt;Object[] data&lt;/code&gt;: the array of class state objects composing the current block&lt;/li&gt;
  		&lt;li&gt;&lt;code&gt;Map scroller&lt;/code&gt;: the map containing the blocks information: 
  		   &lt;ul&gt;
  		      &lt;li&gt;&lt;code&gt;first&lt;/code&gt;: the index of the first block of objects&lt;/li&gt;
  		      &lt;li&gt;&lt;code&gt;previous&lt;/code&gt;: the index of the previous block of objects&lt;/li&gt;
  		      &lt;li&gt;&lt;code&gt;next&lt;/code&gt;: the index of the next block of objects&lt;/li&gt;
  		      &lt;li&gt;&lt;code&gt;last&lt;/code&gt;: the index of the last block of objects&lt;/li&gt;
  		      &lt;li&gt;&lt;code&gt;current&lt;/code&gt;: the one-based index of the current block of objects&lt;/li&gt;
  		      &lt;li&gt;&lt;code&gt;blocks&lt;/code&gt;: the array of the bloks indexes&lt;/li&gt;
  		      &lt;li&gt;&lt;code&gt;from&lt;/code&gt;: the index of the first object included within the current block&lt;/li&gt;
  		      &lt;li&gt;&lt;code&gt;to&lt;/code&gt;: the index of the last object included within the current block&lt;/li&gt;
  		      &lt;li&gt;&lt;code&gt;of&lt;/code&gt;: the total number of objects&lt;/li&gt;
  		   &lt;/ul&gt;
  		&lt;/li&gt;
  	   &lt;/ul&gt;
	&lt;/p&gt;
</BeanDescription> </Component>