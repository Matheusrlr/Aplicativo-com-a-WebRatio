#?delimiters [%, %], [%=, %]
<wr:LayoutParameter label="Use Empty Unit Message" name="use-empty-unit-message" type="boolean" default="false">
Defines the usage of a message for empty units.
Allowed values are: true(default) or false.
</wr:LayoutParameter>
<wr:LayoutParameter label="Empty Unit Message" name="empty-unit-message" type="string" default="emptyUnitMessage">
Defines the key of the message to use if the component is empty.
Default value: emptyUnitMessage
</wr:LayoutParameter>
[%
import org.apache.commons.lang.StringUtils

setHTMLOutput()
def unitId = component["id"]
def useEmptyUnitMessage = params["use-empty-unit-message"]
def emptyUnitMessage = params["empty-unit-message"]

def atts = component.selectNodes("DisplayAttribute")

//returns true if the given event must be rendered as a form button
def isButton(event){
  def navLink = getByIdOptional(event["event"])?.selectSingleNode("NavigationFlow")
  def parameterBindings = navLink.selectNodes("ParameterBinding").collect{it["source"]}
  if(parameterBindings.isEmpty()){
    parameterBindings = getAutomaticParameterBindings(navLink).collect{it["source"]}
  }

  for(param in parameterBindings){
    if(param?.startsWith("data")){
      return false;
    }
  }
  return true
}

%]
[% if (useEmptyUnitMessage != "true") { %]
<c:if test="${not(empty <wr:Id context="component"/>) and (<wr:Id context="component"/>.dataSize gt 0)}">
[% } else { %]
<c:choose>
<c:when test="${not(empty <wr:Id context="component"/>) and (<wr:Id context="component"/>.dataSize gt 0)}">
[% } %]
	<wr:Frame>
		<div class="plain <wr:StyleClass/>">
			<div class="plain CheckableList">
				<table>
					<tr>
						<td colspan="3" class="error">
							<form:errors path="<wr:Id context="component"/>Checked" cssClass="error"/>
						</td>
					</tr>
					<tr>
						<td>
							<table border="0" cellspacing="1" cellpadding="2">
								<tr>
									<td/>
									<wr:Iterate context="component" select="layout:Attribute" var="attr">
										<wr:Visible>
											<th nowrap="nowrap" class="<wr:StyleClass/> header"><wr:Label/></th>
										</wr:Visible>
									</wr:Iterate>
									<wr:Iterate context="component" select="layout:Event" var="event">
										<wr:Visible>
											<td/>
										</wr:Visible>
									</wr:Iterate>
								</tr>
								<c:forEach var="current" varStatus="status" items="${<wr:Id context="component"/>.data}">
									<c:set var="index" value="${status.index}"/>
									<tr>
										<td>
											<form:checkbox path="<wr:Id context="component"/>Checked" cssClass="checkBox" value="${<wr:UnitId/>.key[index]}"/>
										</td>
										<wr:Iterate context="component" select="layout:Attribute" var="attr">
											<wr:Visible position="'index'">
												<td class="<wr:StyleClass/> value"><wr:Value/></td>
											</wr:Visible>
										</wr:Iterate>
										<wr:Iterate context="component" select="layout:Event" var="event">
											<wr:Visible position="'index'">
												[% if (!isButton(event)) { %]
													<td><wr:Event context="event" class="link"/></td>
												[% } %]
											</wr:Visible>
										</wr:Iterate>
									</tr>
								</c:forEach>
							</table>
							<table>
								<tr>
									<wr:Iterate context="component" select="layout:Event" var="event">
										<wr:Visible>
											[% if (isButton(event)) { %]
									             <td><wr:Event type="button" class="button"/></td>
											[% } %]
										</wr:Visible>
									</wr:Iterate>
								</tr>
							</table>
						</td>
					</tr>
				</table>
			</div>
		</div>
	</wr:Frame>
[% if (useEmptyUnitMessage != "true") { %]
</c:if>
[% } else { %]
</c:when>
<c:otherwise>
	<wr:Frame>
		<div class="plain <wr:StyleClass/>">
			<div class="plain CheckableList">
				<table>
					<tr>
						<td><spring:message code="[%printJSPTagValue(emptyUnitMessage)%]"/></td>
					</tr>
				</table>
			</div>
		</div>
	</wr:Frame>
</c:otherwise>
</c:choose>
[% } %]