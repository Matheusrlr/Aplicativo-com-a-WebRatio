#?delimiters [%, %], [%=, %]
<wr:LayoutParameter label="Label Position" name="label-position" type="enum" values="top|left" default="left">
Position of the field label in relation to the field itself.
Applicable only when rendering the entire Layout Field at once (mode = "full"), 
Allowed values are:
- left (default): label on the left side of the field,
- top: label just above the field.
</wr:LayoutParameter>
<wr:LayoutParameter label="Label width" name="label-width" type="string" default="15ex">
CSS width of the field label.
Applicable only when rendering the entire Layout Field at once (mode = "full"), 
Most useful when placing labels on left, in order to visually align fields.
</wr:LayoutParameter>
<wr:LayoutParameter label="Error Messages Position" name="error-position" type="enum" values="right|bottom" default="right">
Position of the field error message in relation to the field itself.
Applicable only when rendering the entire Layout Field at once (mode = "full").
Allowed values are:
- right (default): error on the right side of the field,
- bottom: error just below the field.
</wr:LayoutParameter>
<wr:LayoutParameter label="Custom ID" name="custom-id" type="string">
Specifies a custom value for the "id" attribute of the generated
HTML field. This overrides any identifier that is usually generated.
Defaults to the filed property name in the form bean.
</wr:LayoutParameter>
<wr:LayoutParameter label="Input size" name="input-size" default="25" type="string">
Defines the size of inputs.
Allowed values are:
- size of the input
- 25 (default)
</wr:LayoutParameter>
<wr:LayoutParameter label="Input Max Length" name="input-max-length" type="string">
Defines the max length of inputs.
</wr:LayoutParameter>
<wr:LayoutParameter label="Use Javascript" name="use-javascripts" type="boolean" default="true">
Defines if calendar or Advanced HTML Editor have to be used.
 - true (default)
</wr:LayoutParameter>
<wr:LayoutParameter label="CKEditor toolbar" name="fck-toolbar" type="string" default="WebRatioDefault">
Defines the toolbar the CKEditor should use.
Allowed values are:
- any toolbar defined in the CKEditory/config.js file
- WebRatioDefault (default)
</wr:LayoutParameter>
<wr:LayoutParameter label="Textarea width" name="width" default="35" type="string">
Defines the width of the textarea fields.
Allowed values are:
- numbers of columns
- 35 (default)
</wr:LayoutParameter>
<wr:LayoutParameter label="Textarea height" name="height" default="8" type="string">
Defines the height of the textarea fields.
Allowed values are:
- numbers of rows
- 8 (default)
</wr:LayoutParameter>
<wr:LayoutParameter label="Boolean field rendering" name="boolean-field-rendering" type="enum" values="normal|checkbox" default="normal">
Defines the rendering of a boolean field.
Allowed values are:
- normal (default)
- checkbox
</wr:LayoutParameter>
<wr:LayoutParameter label="Use 'No selection' in Selection fields" name="selection-field-empty-message" type="boolean" default="true">
Defines if the option "No selection" has to be used.
Allowed values are:
 - true (default)
 - false
</wr:LayoutParameter>
<wr:LayoutParameter label="Use 'No selection' in MultiSelection fields" name="multi-selection-field-empty-message" type="boolean" default="false">
Defines if the option "No selection" has to be used in MultiSelection fields.
Allowed values are:
 - true
 - false (default)
</wr:LayoutParameter>
<wr:LayoutParameter label="No Selection Message" name="no-selection-message" type="string" default="selectionfield.noselection">
Defines the key of the message to use as the no selection item.
Default value: selectionfield.noselection
</wr:LayoutParameter>
<wr:LayoutParameter label="Selection fields rendering" name="selection-field-rendering" type="enum" values="select|radio|radio vertical" default="select">
Defines the rendering of a selection field.
Allowed values are:
- select (default)
- radio
- radio vertical
</wr:LayoutParameter>
<wr:LayoutParameter label="Multi selection fields rendering" name="multi-selection-field-rendering" type="enum" values="checkbox|multiple select" default="checkbox">
Defines the rendering of a multi selection field.
Allowed values are:
- checkbox (default)
- multiple select
</wr:LayoutParameter>
<wr:LayoutParameter label="Multiple Select Size" name="multiple-select-height" default="5" type="string">
Defines the size of a multiselection field rendered as multiple select.
By default the multiple select gets the size of the elements shown.
</wr:LayoutParameter>
<wr:LayoutParameter label="Show 'Select All' and 'Deselect All' links" name="select-all-links" type="boolean" default="false">
Defines if multiselection fields provide two links to select and deselect all options.
</wr:LayoutParameter>
<wr:LayoutParameter label="Localize Values" name="localize-values" type="boolean" default="false">
Defines whether to use bean message to print out the (multi) selection field values.
</wr:LayoutParameter>
<wr:LayoutParameter label="Redisplay password" name="redisplay-password" type="boolean" default="false">
Defines if the password has to be redisplayed on page refresh.
</wr:LayoutParameter>
<wr:LayoutParameter label="Show Mandatory Fields" name="mandatory-fields" type="boolean" default="false">
Defines whether to show a '*' for mandatory fields or not.
Allowed values are: true or false(default).
</wr:LayoutParameter>
[%
import org.apache.commons.lang.math.NumberUtils
import org.apache.commons.lang.StringUtils

def type = field["type"]
def subType = getByIdOptional(field["subType"])
def typeId = type
if(subType != null){
  typeId = subType["id"]
  type = subType["type"]
}
def contentType = field["contentType"]
def fieldId = field["field"]
def modifiable = (field["modifiable"] == "true")
def plain = getById(field["field"])?.name == "Field"
def selection = getById(field["field"])?.name == "SelectionField"
def multiSelection = getById(field["field"])?.name == "MultiSelectionField"
def fieldProp = field["field"] + ((isLocalizedType(type) && plain) ? "_locale" : "")
def htmlId = StringUtils.defaultIfEmpty(params["custom-id"], fieldProp)
def width = NumberUtils.toInt(params["width"])
def height = NumberUtils.toInt(params["height"])
def inputSize = params["input-size"]
def maxLength = params["input-max-length"]
def useJavascripts = params["use-javascripts"]
def localizeValues = "true" == params["localize-values"] || (isBpmLocalizedModel() && StringUtils.isNotBlank(getInteractionElement(field).valueOf("@bpm:uuid")))
def ckEditorToolbar = StringUtils.defaultIfEmpty(params["fck-toolbar"], "WebRatioDefault")
def formBean = getFormBeanName(page)
def passwordStrengthness = field.selectSingleNode("VRules/PasswordStrengthValidationRule")
def submitEvents = getSubmitLayoutEvents(field)
def readCond = getDisableCondition(field)
def readOnly = "false"
if(!selection && !multiSelection && !modifiable){
  readOnly = "true"
}else if(readCond != null){
  readOnly = "\${" + readCond + "}"  
}
def captcha = field.selectSingleNode("VRules/CaptchaValidationRule") != null
def submitButtonsClass = (submitEvents.size() > 0 ? "wr-submitButtons:" + submitEvents.collect{ getEventRuntimeId(it) }.join(",") : "")
def printFieldMode = { mode ->
	def templateFile = getLayoutFile(getLayout(field, LayoutType.FIELD).path, LayoutType.FIELD)
	printRaw(executeTemplate(templateFile.absolutePath, [ field: field, mode: mode, styleClass: styleClass ]));
}

if (mode == "full") { %]
<div class="fullField">
	<div class="labelWrapper" [% if (params["label-position"] == "left") { %]style="width: [%= params["label-width"] %]; float: left"[% } %]>[% printFieldMode("label") %]</div>
	[% if (params["error-position"] == "right") { %]
		<div style="float: right">[% printFieldMode("error") %]</div>
	[% } %]
	<div class="valueWrapper" style="overflow: hidden">[% printFieldMode("value") %]</div>
	[% if (params["error-position"] == "bottom") { %]
		<div>[% printFieldMode("error") %]</div>
	[% } %]
</div>

[% } else if (mode == "error") { %]
<form:errors path="[%=fieldProp%]" cssClass="<wr:StyleClass context="field"/> error"/>
[% } else if (mode == "label") { %]
<span class="<wr:StyleClass context="field"/> header"><wr:Label context="field"/>[% if (params["mandatory-fields"] == "true" && isMandatoryField(field)) { %] *[% } %]</span>
[% } else if (plain) {
	if (type == "boolean") {
		if (params["boolean-field-rendering"] == "checkbox") { %]
			<form:checkbox cssClass="[%=submitButtonsClass%] [%=styleClass%]" path="[%=fieldProp%]" id="[%=htmlId%]" value="true" disabled="[% printJSPTagValue(readOnly)%]"/>
		[% } else { %]
			[% if (modifiable) { %]
				<div>
					<form:radiobutton cssClass="[%=submitButtonsClass%] [%=styleClass%]" path="[%=fieldProp%]" value="true" disabled="[% printJSPTagValue(readOnly)%]"/>
					<spring:message code="[%=typeId%].yes"/>
					<form:radiobutton cssClass="[%=submitButtonsClass%] [%=styleClass%]" path="[%=fieldProp%]" value="false" disabled="[% printJSPTagValue(readOnly)%]"/>
					<spring:message code="[%=typeId%].no"/>
				</div>
			[% } else { %]
				<c:choose>
					<c:when test="${[%=formBean%].[%=fieldProp%]}">
						<spring:message code="[%=typeId%].yes"/>
					</c:when>
					<c:otherwise>
						<spring:message code="[%=typeId%].no"/>
					</c:otherwise>
				</c:choose>
			[% } %]
		[% } %]
		<c:if test="[% printJSPTagValue(readOnly)%]">
			<form:hidden path="[%=fieldProp%]"/>
		</c:if>
	[% } else if (type == "text") { %]
		[% if (contentType == "text/html" && useJavascripts == "true") { %]
			<form:textarea id="[%= htmlId %]" cssClass="[%=styleClass%]" style="box-sizing:border-box; width:[%= (width * 10) + 2 %]px; height:[%= ((height * 10) + 120) + 71 %]px" path="[%=fieldProp%]" readonly="[% printJSPTagValue(readOnly)%]"/>		
		    <wr:RequireResource ref="cksource-ckeditor">	
				<script type="text/javascript">
					if (CKEDITOR.instances['[%= fieldProp %]']) {
						CKEDITOR.instances['[%= fieldProp %]'].destroy(true);
					}
					CKEDITOR.replace('[%= fieldProp %]', {
						width    : [%= width * 10 %],
						height   : [%= (height * 10) + 120 %],
						toolbar  : '[%= ckEditorToolbar %]',
						language : '<%= com.webratio.web.mvc.WebConstants.PAGE_LOCALE_KEY.get(pageContext).getLanguage() %>',
						baseHref : '<%= wrBaseURI %>',
						readOnly : [% printJSPTagValue(readOnly)%]
					});
				</script>
			</wr:RequireResource>
		[% } else { %]
			<form:textarea id="[%= htmlId %]" cssClass="[%=styleClass%]" cols="[%= width %]" rows="[%= height %]" path="[%=fieldProp%]" readonly="[% printJSPTagValue(readOnly)%]"/>		
		[% } %]
	[% } else if (type == "blob") { %]
		<form:hidden path="[%=fieldProp%].preload"/>
		[% if (modifiable) { %]
			<form:input id="[%= htmlId %]" cssClass="[%=submitButtonsClass%] [%=styleClass%]" path="[%=fieldProp%].file" disabled="[% printJSPTagValue(readOnly)%]" size="[%= inputSize %]" type="file"/>
		[% } %]
		<c:if test="${not(empty [%=formBean%].[%=fieldProp%].preload)}">
		  <table>
		    <tr>
		      <td>
		        <form:checkbox cssClass="[%=submitButtonsClass%] [%=styleClass%]" path="[%=fieldProp%].clear" disabled="[% printJSPTagValue(readOnly)%]"/> clear <a target="blank" href="<webratio:BLOB value="${[%=formBean%].[%=fieldProp%].preload}"/>">preview</a>
		      </td>
		    </tr>
		  </table>
		</c:if>
	[% } else if (type == "password") { %]
		<form:password id="[%= htmlId %]" size="[%= inputSize %]" cssClass="[%=submitButtonsClass%] [%=styleClass%]" path="[%=fieldProp%]" readonly="[% printJSPTagValue(readOnly)%]" redisplay="[%= params["redisplay-password"]%]" autocomplete="off" 
		[% if(passwordStrengthness){ %]data-security-validation="[%= htmlId %]_validation"[% } %]/>
		[% if(passwordStrengthness){ %]
			<wr:RequireResource ref="wr-password-strengthness-js"/>
			<wr:RequireResource ref="wr-password-strengthness-css"/>
			<script id="[%= htmlId %]_validation" type="application/json">
			{
				"securityLevel": "[%= passwordStrengthness["securityLevel"] %]",[% 
			if (passwordStrengthness["securityLevel"] == "custom") { %]
				"customOptions": {
					"minLength": [%= passwordStrengthness["minLength"] == Integer.toString(NumberUtils.toInt(passwordStrengthness["minLength"])) ? passwordStrengthness["minLength"] : 0 %],
					"maxLength": [%= passwordStrengthness["maxLength"] == Integer.toString(NumberUtils.toInt(passwordStrengthness["maxLength"])) ? passwordStrengthness["maxLength"] : Integer.MAX_VALUE %],
					"useNumbers": [%= passwordStrengthness["useNumbers"] == "true" %],
					"useLowerLetters": [%= passwordStrengthness["useLowerCaseCharacters"] == "true" %],
					"useCapitalLetters": [%= passwordStrengthness["useUpperCaseCharacters"] == "true" %],
					"useSpecialCharacters": [%= passwordStrengthness["useSpecialCharacters"] == "true" %]
				},[% 
			} %]
				"messages": {
					"title": "<bean:message key="PasswordStrengthValidationRule.boxTitle"/>",
					"useNumbers": "<bean:message key="PasswordStrengthValidationRule.numbersCriteria"/>",
					"useLowerLetters": "<bean:message key="PasswordStrengthValidationRule.lowerCharCriteria"/>",
					"useCapitalLetters": "<bean:message key="PasswordStrengthValidationRule.capitalCharCriteria"/>",
					"useSpecialCharacters": "<bean:message key="PasswordStrengthValidationRule.specialCharCriteria"/>",
					"noRepetitions": "<bean:message key="PasswordStrengthValidationRule.noRepetitionCriteria"/>",
					"charactersWord": "<bean:message key="PasswordStrengthValidationRule.charactersWord"/>"
				}
			}
			</script>			
		[% } %]
	[% } else if (captcha) { %]
	    <table>
	      <tr>
	        <c:set var="captchaImageUrl">captcha.[%=field["id"]%].jpg?t=<%=System.currentTimeMillis()%></c:set>
	        <td style="border:1px solid black" align="center"><img id="captcha_[%=field["id"]%]" src="<webratio:BLOB value="${captchaImageUrl}"/>"/></td>
	        <td style="border:1px solid black" align="left" onClick="$('#captcha_[%=field["id"]%]').attr('src', '<webratio:BLOB value="${captchaImageUrl}"/>&amp;renew=' + new Date().valueOf())"><img src="Resources/refresh.png"/></td>
	      </tr>
	      <tr>  
	        <td><form:input [% if (maxLength != "") { %]maxlength="[%= maxLength %]"[% } %] size="[%= inputSize %]" id="[%= htmlId %]" cssClass="[%=submitButtonsClass%] [%=styleClass%]" path="[%=fieldProp%]" readonly="[% printJSPTagValue(readOnly)%]"/></td>
	      </tr>
	    </table>
	[% } else { %]
		[% if ((type == "date" || type == "time" || type == "timestamp") && useJavascripts == "true") { %]
			<div>
				<div style="padding-right: 24px; white-space: nowrap">
					<form:input [% if (maxLength != "") { %]maxlength="[%= maxLength %]"[% } %] size="[%= inputSize %]" id="[%= htmlId %]" cssClass="[%=submitButtonsClass%] [%=styleClass%]" path="[%=fieldProp%]" readonly="[% printJSPTagValue(readOnly) %]" style="width: 100%; margin: 0"/>
					<wr:RequireResource ref="wr-calendar-utils"/>
					[% if (type == "date" || type == "timestamp") { %]
						<wr:RequireResource ref="jquery-ui-datepicker-lang"/>
					[% } %]
					[% if (type == "time" || type == "timestamp") { %]
						<wr:RequireResource ref="richardson-timepicker-lang"/>
					[% } %]
					<c:choose><c:when test="[% printJSPTagValue(readOnly) %]">
						<img src="Resources/calendar_disabled.gif" />
					</c:when><c:otherwise>
						<script type="text/javascript">
							jQuery(function($) { 								
								var pattern = $.wr.calendar.[%= type %]ConfigFromJava("${[%= typeId%]Pattern}");
								$('#[%= fieldProp %]').[%= (type == "timestamp") ? "datetime" : type %]picker({
									showOn: "button",
									showWeek: true,
									buttonImage: "Resources/calendar.gif",
									buttonImageOnly: true,
									showButtonPanel: true,
								[% if (type == "date") { %]
									dateFormat: pattern.dateFormat,
									firstDay: <%= java.util.Calendar.getInstance(com.webratio.web.mvc.WebConstants.PAGE_LOCALE_KEY.get(pageContext)).getFirstDayOfWeek() - 1 %>
								[% } else if (type == "time") { %]
									timeFormat: pattern.timeFormat,
									ampm: pattern.ampm
								[% } else { %]
									dateFormat: pattern.dateFormat,
									firstDay: <%= java.util.Calendar.getInstance(com.webratio.web.mvc.WebConstants.PAGE_LOCALE_KEY.get(pageContext)).getFirstDayOfWeek() - 1 %>,
									timeFormat: pattern.timeFormat,
									ampm: pattern.ampm,
									separator: pattern.separator
								[% } %]
								});
							});
						</script>
					</c:otherwise></c:choose>
				</div>
			</div>
		[% } else { %]
			<form:input [% if (maxLength != "") { %]maxlength="[%= maxLength %]"[% } %] size="[%= inputSize %]" id="[%= htmlId %]" cssClass="[%=submitButtonsClass%] [%=styleClass%]" path="[%=fieldProp%]" readonly="[% printJSPTagValue(readOnly) %]"/>
  		[% } %]
	[% } %]
[% } else if (selection) { 
		// selection field variables
		def itemsProperty = field["field"] + "Items"
		def selectionFieldRendition = params["selection-field-rendering"]
		def selectionFieldEmpty = params["selection-field-empty-message"]
        if(readCond != null){
           %]<c:if test="[% printJSPTagValue(readOnly)%]"><form:hidden path="[%= fieldProp %]"/></c:if>[%        
        }
		if (type == "boolean") {
			if (selectionFieldRendition == "select") { %]
			<form:select id="[%= htmlId %]" cssClass="[%=submitButtonsClass%] [%=styleClass%]" path="[%=fieldProp%]" disabled="[% printJSPTagValue(readOnly)%]">
			  [% if (selectionFieldEmpty == "true") { %]
			  	<form:option value=""><spring:message code="[%=params["no-selection-message"]%]"/></form:option>
			  [% } %]
			  <form:option value="true"><spring:message code="[%=typeId%].yes"/></form:option>
			  <form:option value="false"><spring:message code="[%=typeId%].no"/></form:option>			  
			</form:select>
			[% } else if (selectionFieldRendition == "radio vertical") { %]
			<table>
      		  <tr> 
  			    <td [%= styleClass ? "class=\"${styleClass}\"" : "" %]>
  			      <form:radiobutton path="[%=fieldProp%]" value="true" id="[%=fieldId%]_1" cssClass="[%=submitButtonsClass%]" disabled="[% printJSPTagValue(readOnly)%]"/><spring:message code="[%=typeId%].yes"/>
  			    </td>
      		  </tr>
      		  <tr>
  			    <td [%= styleClass ? "class=\"${styleClass}\"" : "" %]>
  			      <form:radiobutton path="[%=fieldProp%]" value="false" id="[%=fieldId%]_0" cssClass="[%=submitButtonsClass%]" disabled="[% printJSPTagValue(readOnly)%]"/><spring:message code="[%=typeId%].no"/>
  			    </td>
  			  </tr>
      		</table>
			[% } else { %]
			<div>
	      		<form:radiobutton path="[%=fieldProp%]" value="true" id="[%=fieldId%]_0" cssClass="[%=submitButtonsClass%]" disabled="[% printJSPTagValue(readOnly) %]"/><spring:message code="[%=typeId%].yes"/>
	      		<form:radiobutton path="[%=fieldProp%]" value="false" id="[%=fieldId%]_0" cssClass="[%=submitButtonsClass%]" disabled="[% printJSPTagValue(readOnly) %]"/><spring:message code="[%=typeId%].no"/>
	        </div>
			[% } %]
		[% } else { 
			if (selectionFieldRendition == "select") { %]
			<form:select id="[%= htmlId %]" cssClass="[%=submitButtonsClass%] [%=styleClass%]" path="[%= fieldProp %]" disabled="[% printJSPTagValue(readOnly)%]">
				[% if (selectionFieldEmpty == "true") { %]
			  		<form:option value=""><spring:message code="[%=params["no-selection-message"]%]"/></form:option>
			  	[% } %]
			  [%if (localizeValues) {%]
				<c:forEach var="optionCurrent" varStatus="optionStatus" items="${[%=formBean%].[%=itemsProperty%]}">
					<form:option value="${optionCurrent.value}"><spring:message code="${optionCurrent.label}"/></form:option>
				</c:forEach>
			  [%} else {%]
			    <form:options items="${[%=formBean%].[%=itemsProperty%]}" itemValue="value" itemLabel="label"/>
			  [% } %]
			</form:select>
			[% } else if (selectionFieldRendition == "radio vertical") { %]
			<table>
			<c:forEach var="current" varStatus="status" items="${[%=formBean%].[%=itemsProperty%]}">
      			<c:set var="index" value="${status.index}"/>
      			<tr>
      			  <td [%= styleClass ? "class=\"${styleClass}\"" : "" %]>
      			    <input type="radio" name="[%=fieldProp%]" id="[%=fieldId%]_${index}" class="[%=submitButtonsClass%]" value="<c:out value="${current.value}"/>" <c:if test="${current.value eq [%= formBean + "." + fieldProp %]}">checked="checked"</c:if> [% if(readCond != null){%]<c:if test="[% printJSPTagValue(readOnly)%]">disabled</c:if>[%}%]>
      				  	[%if (localizeValues) {%]
						   <spring:message code="${current.label}"/>
					    [%} else {%]
      				       <c:out value="${current.label}"/>
      				    [%}%]
      			    </input>
      			  </td>
      			</tr>
      		</c:forEach>
      		</table>
      		[% } else { %]
			<div>
				<c:forEach var="current" varStatus="status" items="${[%=formBean%].[%=itemsProperty%]}">
	      			<c:set var="index" value="${status.index}"/>
	      			<input type="radio" name="[%=fieldProp%]" id="[%=fieldId%]_${index}" class="[%=submitButtonsClass%]" value="<c:out value="${current.value}"/>" <c:if test="${current.value eq [%= formBean + "." + fieldProp %]}">checked="checked"</c:if> [% if(readCond != null){%]<c:if test="[% printJSPTagValue(readOnly) %]">disabled</c:if>[%}%]>
	      				[%if (localizeValues) {%]
						   <spring:message code="${current.label}"/>
					    [%} else {%]
	      				   <c:out value="${current.label}"/>
	      				[%}%]
	      			</input>
	      		</c:forEach>
      		</div>
			[% } %]
		[% } %]
[% } else if (multiSelection) { 
	// multi selection field variables
	def multiselectionFieldEmpty = params["multi-selection-field-empty-message"]	 
	if (params["multi-selection-field-rendering"] == "checkbox") { 
		def itemsProperty = fieldProp + "Items"
		if (readCond != null) { %]
			<c:if test="[% printJSPTagValue(readOnly)%]">
				<c:forEach var="preCheck" items="${[%=formBean%].[%= fieldProp%]}">
					<form:hidden path="[%= fieldProp %]" value="${preCheck}"/>
				</c:forEach>
			</c:if>
		[% } %]
		<table>
			<c:forEach var="current" varStatus="status" items="${[%=formBean%].[%=itemsProperty%]}">
				<tr>
					<td [%= styleClass ? "class=\"${styleClass}\"" : "" %]>
						<form:checkbox id="[%=fieldId%]_${status.index}" cssClass="[%=submitButtonsClass%] [%= styleClass %]" path="[%=fieldProp%]" value="${current.value}" disabled="[% printJSPTagValue(readOnly)%]"/>
						[%if (localizeValues) {%]
						   <spring:message code="${current.label}"/>
					    [%} else {%]
						   <c:out value="${current.label}"/>
						[%}%]
					</td>
				</tr>
			</c:forEach>
			[% if (params["select-all-links"] == "true") { %]
				<tr>
					<td>
						<a href="javascript:selectAll('[%= fieldProp %]', true)"><spring:message code="multiselectionfield.selectAll"/></a>
						<a href="javascript:selectAll('[%= fieldProp %]', false)"><spring:message code="multiselectionfield.deselectAll"/></a>
					</td>
				</tr>
			[% } %]
		</table>
	[% } else {
		def itemsProperty = fieldProp + "Items"
		if (readCond != null) { %]
			<c:if test="[% printJSPTagValue(readOnly)%]">
				<c:forEach var="preCheck" items="${[%=formBean%].[%= fieldProp%]}">
					<form:hidden path="[%= fieldProp %]" value="${preCheck}"/>
				</c:forEach>
			</c:if>
		[% } %]
		<form:select cssClass="[%=submitButtonsClass%] [%=styleClass%]" id="[%=htmlId%]" path="[%=fieldId%]" multiple="true" size="[%=params["multiple-select-height"]%]" disabled="[% printJSPTagValue(readOnly)%]">
			[% if (multiselectionFieldEmpty == "true") { %]
				<form:option value=""><spring:message code="[%=params["no-selection-message"]%]"/></form:option>
			[% } %]
			[%if (localizeValues) {%]
				<c:forEach var="optionCurrent" varStatus="optionStatus" items="${[%=formBean%].[%=itemsProperty%]}">
					<form:option value="${optionCurrent.value}"><spring:message code="${optionCurrent.label}"/></form:option>
				</c:forEach>
			[%} else {%]
			  <form:options items="${[%=formBean%].[%=itemsProperty%]}" itemValue="value" itemLabel="label"/>
			[%}%]
		</form:select>
		[% if (params["select-all-links"] == "true") { %]
			<br />
			<a href="javascript:selectAll('[%= fieldProp %]', true)"><spring:message code="multiselectionfield.selectAll"/></a>
			<a href="javascript:selectAll('[%= fieldProp %]', false)"><spring:message code="multiselectionfield.deselectAll"/></a>
			<br />
		[% } %]
	[% } %]
[% } %]
