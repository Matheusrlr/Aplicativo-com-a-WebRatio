#?delimiters [%, %], [%=, %]
<wr:LayoutParameter label="Show Header" name="showHeader" type="boolean" default="true">
Defines the rendition of the header.
Allowed values are: true(default) or false.
</wr:LayoutParameter>
<wr:LayoutParameter label="Header Font Weight" name="headerfont-weight" type="enum" values="normal|bold" default="bold">
Defines the rendering of the block header
Allowed values are:
- normal
- bold (default)
</wr:LayoutParameter>
<wr:LayoutParameter label="Header Background" name="headerbackground" type="color" default="">
Defines the header background color.
</wr:LayoutParameter>
<wr:LayoutParameter label="Header Color" name="headercolor" type="color" default="">
Defines the header text color.
</wr:LayoutParameter>
<wr:LayoutParameter label="Header Borders" name="headerborder" type="string" default="">
Defines the header borders to render.
Value is a space-separated combination of the
following keywords: top, left, right, bottom.
</wr:LayoutParameter>
<wr:LayoutParameter label="Header Border Style" name="headerborder-style" type="enum" values="NONE|THIN|MEDIUM|DASHED|DOTTED|THICK|DOUBLE|HAIR|MEDIUM_DASHED|DASH_DOT|MEDIUM_DASH_DOT|DASH_DOT_DOT|MEDIUM_DASH_DOT_DOT|SLANTED_DASH_DOT">
Defines the header border style.
</wr:LayoutParameter>
<wr:LayoutParameter label="Header Border Color" name="headerborder-color" type="color" default="">
Defines the header border color.
</wr:LayoutParameter>

<wr:LayoutParameter label="Cell Font Weight" name="cellfont-weight" type="enum" values="normal|bold" default="">
Defines the rendering of a cell.
Allowed values are:
- normal (default)
- bold
</wr:LayoutParameter>
<wr:LayoutParameter label="Cell Background" name="cellbackground" type="color" default="">
Defines the cell background color.
</wr:LayoutParameter>
<wr:LayoutParameter label="Text Color" name="cellcolor" type="color" default="">
Defines the text color.
</wr:LayoutParameter>
<wr:LayoutParameter label="Cell Borders" name="cellborder" type="string" default="">
Defines the cell borders to render.
Value is a space-separated combination of the
following keywords: top, left, right, bottom.
</wr:LayoutParameter>
<wr:LayoutParameter label="Cell Border style" name="cellborder-style" type="enum" values="NONE|THIN|MEDIUM|DASHED|DOTTED|THICK|DOUBLE|HAIR|MEDIUM_DASHED|DASH_DOT|MEDIUM_DASH_DOT|DASH_DOT_DOT|MEDIUM_DASH_DOT_DOT|SLANTED_DASH_DOT">
Defines the cell border style.
</wr:LayoutParameter>
<wr:LayoutParameter label="Cell Border Color" name="cellborder-color" type="color" default="">
Defines the cell border color.
</wr:LayoutParameter>


<wr:LayoutParameter label="First Row" name="firstRow" type="string" default="">
The block first row (1-based)
</wr:LayoutParameter>
<wr:LayoutParameter label="First Column" name="firstColumn" type="string" default="">
The block first column code or number (1-based)
</wr:LayoutParameter>

[%
import org.apache.commons.lang.StringUtils

setXMLOutput()

def writeStyle(params, prefix){
   def style = params.entrySet().findAll{it.key.startsWith(prefix) && !StringUtils.isBlank(it.value)}.collect{StringUtils.uncapitalize(it.key - prefix) + ":" + it.value}.join(";")    
   if(!StringUtils.isBlank(style)){%] style="[%= style%]"[%}
}

def writeLocation(params){
    if(!StringUtils.isBlank(params["firstRow"])){%] firstRow="[%= params["firstRow"]%]"[%}
    if(!StringUtils.isBlank(params["firstColumn"])){%] firstColumn="[%= params["firstColumn"]%]"[%}
}

def writeDataFormat(queryOutput){
  if(queryOutput["subType"] != ""){
    def type = queryOutput["type"]
    if ((type == "float") || (type == "integer") || (type == "decimal") || (type == "date") || (type == "time") || (type == "timestamp")) { 
     %] dataFormat="${[%=queryOutput["subType"] + "Pattern"%]}"[%
    }
  }  
}

def queryOutputs = []
if(component["mode"] != "dynamic"){
  def outputsOrderIds = component["outputsOrder"].tokenize(" ")
  def allQueryOutputs = component.selectNodes("QueryOutput")
  queryOutputs += outputsOrderIds.collect{getById(it)}
  queryOutputs += allQueryOutputs.findAll{!outputsOrderIds.contains(it["id"])}
}

%]
<Block position="[%= blockPosition%]"[%writeLocation(params)%]> 
<c:if test="${not(empty <wr:Id context="component"/>) and (<wr:Id context="component"/>.dataSize gt 0)}">
	<wr:Frame>
	[%if(component["mode"] == "dynamic"){%]
    	[%if("true" == params["showHeader"]){%]
        <Header[%writeStyle(params, "header")%]>
          <c:forEach var="output" varStatus="status" items="${<wr:Id context="component"/>.outputs}">
            <Cell><c:out value="${output.label}"/></Cell>
          </c:forEach>
        </Header>
        [%}%]
        <c:forEach var="current" varStatus="status" items="${<wr:Id context="component"/>.data}">
            <c:set var="index" value="${status.index}"/>
            <Row [%writeStyle(params, "cell")%]>
              <c:forEach var="output" varStatus="status" items="${<wr:Id context="component"/>.outputs}">
                <Cell type="${output.type}"<c:if test="${output.localized and (output.type ne output.typeId)}"> dataFormat="${pageScope[output.pattern]}"</c:if>><c:out value="${current[output.name]}"/></Cell>
              </c:forEach>
            </Row>
        </c:forEach>
    [%}else{%]
        [%if("true" == params["showHeader"]){%]
        <Header[%writeStyle(params, "header")%]>
          [%for(queryOutput in queryOutputs){%]
            <Cell><wr:Label context="queryOutput"/></Cell>
          [%}%]
        </Header>
        [%}%]
        <c:forEach var="current" varStatus="status" items="${<wr:Id context="component"/>.data}">
            <c:set var="index" value="${status.index}"/>
            <Row [%writeStyle(params, "cell")%]>
              [%for(queryOutput in queryOutputs){%]
                <Cell type="[%=queryOutput["type"]%]"[%writeDataFormat(queryOutput)%]><c:out value="${current.[%=getFieldName(queryOutput["id"])%]}"/></Cell>
              [%}%]
            </Row>
        </c:forEach>
    [%}%]		
    </wr:Frame> 
</c:if>     
</Block>
